//+------------------------------------------------------------------+
//| Expert Advisor: Dynamic Hedging Martingale                       |
//|                With Emergency Hedge Strategy                     |
//+------------------------------------------------------------------+
input bool     EnableStrategy      = true;
input bool     EnableEquityStop    = true;       // Enable/disable equity stop protection
input int      ConsecutiveCandles  = 2;
input double   InitialLotSize      = 0.01;
input int      InitialTPPips       = 100;        // Take-profit in pips
input int      TotalLotCounts      = 30;         // Total number of hedge positions
input double   MinLotSize          = 0.02;       // Minimum lot size for hedging
input double   MaxLotSize          = 2.0;        // Maximum lot size for hedging
input double   TriggerPips         = 1000;       // Base trigger pips (will auto-generate array)
input int      ProfitTargetPips    = 1000;       // Total profit target in pips
input int      MagicNumber         = 123456;
input double   MaxEquityDrawdownPercent = 20.0;  // Max allowed equity drawdown percentage
input double   EmergencyLevelPercent = 80.0;     // Equity percentage to trigger emergency hedge (80% or 90%)
input double   EmergencyLotSize    = 0.1;        // Lot size for emergency hedge positions

#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>
CTrade trade;
CPositionInfo positionInfo;

int direction = 0; // 1 for Buy, -1 for Sell
bool initialTradeOpened = false;
bool equityStopTriggered = false;
double lotSequence[];
double triggerPips[];
datetime lastHedgeTime = 0;
double highestEquity = 0;
double initialEntryPrice = 0;
double initialBalance = 0;
bool emergencyMode = false;
int emergencyHedgeCount = 0;
#define PIP 10

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Generate dynamic lot sizes and trigger pips
   GenerateLotSequence();
   GenerateTriggerPipsArray();
   
   highestEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   initialBalance = AccountInfoDouble(ACCOUNT_BALANCE);
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Generate dynamic lot size sequence                               |
//+------------------------------------------------------------------+
void GenerateLotSequence()
{
   ArrayResize(lotSequence, TotalLotCounts);
   
   // Exponential growth from MinLotSize to MaxLotSize
   double growthFactor = pow(MaxLotSize/MinLotSize, 1.0/(TotalLotCounts-1));
   
   for(int i = 0; i < TotalLotCounts; i++)
   {
      lotSequence[i] = MinLotSize * pow(growthFactor, i);
      lotSequence[i] = NormalizeDouble(lotSequence[i], 2);
   }
   
   // Print generated lots for verification
   string lotStr = "Generated Lot Sequence: ";
   for(int i = 0; i < ArraySize(lotSequence); i++)
   {
      lotStr += DoubleToString(lotSequence[i], 2);
      if(i < ArraySize(lotSequence)-1) lotStr += ",";
   }
   Print(lotStr);
}

//+------------------------------------------------------------------+
//| Generate trigger pips array in REVERSE order                     |
//+------------------------------------------------------------------+
void GenerateTriggerPipsArray()
{
   ArrayResize(triggerPips, TotalLotCounts);
   
   // REVERSED trigger pips (increasing triggers)
   for(int i = 0; i < TotalLotCounts; i++)
   {
      triggerPips[i] = TriggerPips * pow(0.97, (TotalLotCounts - 1 - i));
      triggerPips[i] = NormalizeDouble(triggerPips[i], 2);
   }
   
   // Print generated triggers for verification
   string triggerStr = "REVERSED Trigger Pips: ";
   for(int i = 0; i < ArraySize(triggerPips); i++)
   {
      triggerStr += DoubleToString(triggerPips[i], 2);
      if(i < ArraySize(triggerPips)-1) triggerStr += ",";
   }
   Print(triggerStr);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   if(!EnableStrategy || equityStopTriggered) return;

   UpdateHighestEquity();
   
   // Check if we need to activate emergency mode
   if(!emergencyMode && CheckEmergencyCondition())
   {
      emergencyMode = true;
      Alert("EMERGENCY MODE ACTIVATED! Equity dropped below ", EmergencyLevelPercent, "% of initial balance");
   }

   if(EnableEquityStop && CheckEquityStop())
   {
      equityStopTriggered = true;
      CloseAllTrades();
      Alert("Equity stop triggered! All positions closed.");
      return;
   }

   // In emergency mode, we manage emergency hedges separately
   if(emergencyMode)
   {
      ManageEmergencyHedges();
   }
   else // Normal trading mode
   {
      int totalTrades = CountOpenTrades();
      if(totalTrades == 0)
      {
         if(CheckConsecutiveCandles(direction))
         {
            initialTradeOpened = true;
            initialEntryPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
            trade.SetExpertMagicNumber(MagicNumber);
            Print("First Trade at price: ", initialEntryPrice);
            trade.PositionOpen(_Symbol, direction == 1 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL,
                              InitialLotSize, initialEntryPrice,
                              0,
                              initialEntryPrice + (direction == 1 ? InitialTPPips : -InitialTPPips) * PIP * _Point);
         }
      }
      else if(totalTrades < TotalLotCounts)
      {
         ManageHedging();
      }

      double totalProfit = GetTotalUnrealizedProfit();
      if(totalProfit >= ProfitTargetPips * PIP * _Point)
      {
         CloseAllTrades();
         initialTradeOpened = false;
         initialEntryPrice = 0;
      }
   }
}

//+------------------------------------------------------------------+
//| Check if emergency condition is met                              |
//+------------------------------------------------------------------+
bool CheckEmergencyCondition()
{
   double currentEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   double emergencyThreshold = initialBalance * (EmergencyLevelPercent / 100.0);
   return currentEquity <= emergencyThreshold;
}

//+------------------------------------------------------------------+
//| Manage emergency hedge positions                                 |
//+------------------------------------------------------------------+
void ManageEmergencyHedges()
{
   // Check if we need to add another emergency hedge
   double currentEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   double equityPerHedge = initialBalance * (EmergencyLevelPercent / 100.0) / 10.0; // Add hedge for every 10% drop
   
   int requiredHedges = (int)((initialBalance - currentEquity) / equityPerHedge);
   requiredHedges = MathMin(requiredHedges, TotalLotCounts - emergencyHedgeCount); // Don't exceed max positions
   
   if(requiredHedges > emergencyHedgeCount)
   {
      // Open new emergency hedge positions
      for(int i = emergencyHedgeCount; i < requiredHedges; i++)
      {
         double entryPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
         trade.SetExpertMagicNumber(MagicNumber);
         
         // Open in opposite direction
         if(direction == 1)
         {
            trade.PositionOpen(_Symbol, ORDER_TYPE_SELL, EmergencyLotSize, entryPrice, (entryPrice+1), (entryPrice-10));
            Print("Emergency SELL hedge opened at price: ", entryPrice);
         }
         else
         {
            trade.PositionOpen(_Symbol, ORDER_TYPE_BUY, EmergencyLotSize, entryPrice, (entryPrice-1), (entryPrice+10));
            Print("Emergency BUY hedge opened at price: ", entryPrice);
         }
         
         emergencyHedgeCount++;
      }
   }
   
   // Check if we can exit emergency mode (equity recovered)
   if(currentEquity >= initialBalance * ((EmergencyLevelPercent + 10) / 100.0)) // 10% above emergency level
   {
      emergencyMode = false;
      Alert("EMERGENCY MODE DEACTIVATED! Equity recovered above ", EmergencyLevelPercent + 10, "% of initial balance");
   }
}

//+------------------------------------------------------------------+
//| Check equity drawdown                                            |
//+------------------------------------------------------------------+
bool CheckEquityStop()
{
   double currentEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   double drawdownPercent = 0;
   
   if(highestEquity > 0)
   {
      drawdownPercent = ((highestEquity - currentEquity) / highestEquity) * 100;
   }
   
   return drawdownPercent >= MaxEquityDrawdownPercent;
}

//+------------------------------------------------------------------+
//| Count open trades                                                |
//+------------------------------------------------------------------+
int CountOpenTrades()
{
   int count = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if (PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         count++;
   }
   return count;
}

//+------------------------------------------------------------------+
//| Check consecutive candles                                        |
//+------------------------------------------------------------------+
bool CheckConsecutiveCandles(int &dir)
{
   bool bullish = true;
   bool bearish = true;
   double openArray[1], closeArray[1];

   for (int i = 1; i <= ConsecutiveCandles; i++)
   {
      if (CopyOpen(_Symbol, _Period, i, 1, openArray) != 1 ||
          CopyClose(_Symbol, _Period, i, 1, closeArray) != 1)
         return false;

      if (closeArray[0] <= openArray[0]) bullish = false;
      if (closeArray[0] >= openArray[0]) bearish = false;
   }

   if (bullish) { dir = 1; return true; }
   if (bearish) { dir = -1; return true; }
   return false;
}

//+------------------------------------------------------------------+
//| Manage hedging with reversed triggers                            |
//+------------------------------------------------------------------+
void ManageHedging()
{
   if(initialEntryPrice == 0) return;
    
   double currentPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_BID : SYMBOL_ASK);
   int openCount = CountOpenTrades();
   
   if(openCount >= TotalLotCounts) return;
   
   double cumulativeTrigger = 0;
   for(int i = 0; i < openCount; i++)
   {
      cumulativeTrigger += triggerPips[i];
   }
   
   double triggerPrice = initialEntryPrice;
   if(direction == 1)
   {
      triggerPrice -= cumulativeTrigger * PIP * _Point;
   }
   else
   {
      triggerPrice += cumulativeTrigger * PIP * _Point;
   }
   
   bool conditionMet = false;
   if(direction == 1 && currentPrice <= triggerPrice)
   {
      conditionMet = true;
   }
   else if(direction == -1 && currentPrice >= triggerPrice)
   {
      conditionMet = true;
   }
   
   if(conditionMet)
   {
      double lot = lotSequence[openCount];
      double entryPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
      trade.SetExpertMagicNumber(MagicNumber);
      trade.PositionOpen(_Symbol, direction == 1 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL,
                         lot, entryPrice, 0, 0);
      
      if(openCount == 0)
      {
         RemoveInitialPositionTP();
      }
   }
}

//+------------------------------------------------------------------+
//| Remove TP from initial position                                  |
//+------------------------------------------------------------------+
void RemoveInitialPositionTP()
{
   ulong initialTicket = 0;
   datetime earliestTime = D'3000.01.01';
   
   for(int i = PositionsTotal()-1; i >=0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if(PositionGetInteger(POSITION_MAGIC) != MagicNumber) continue;
      datetime posTime = PositionGetInteger(POSITION_TIME);
      if(posTime < earliestTime)
      {
         earliestTime = posTime;
         initialTicket = ticket;
      }
   }
   
   if(initialTicket == 0) return;
   
   if(positionInfo.SelectByTicket(initialTicket))
   {
      trade.PositionModify(initialTicket, positionInfo.StopLoss(), 0);
      Print("Removed TP from initial position #", initialTicket);
   }
}

//+------------------------------------------------------------------+
//| Get total unrealized profit                                      |
//+------------------------------------------------------------------+
double GetTotalUnrealizedProfit()
{
   double profit = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if (PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         profit += PositionGetDouble(POSITION_PROFIT);
   }
   return profit;
}

//+------------------------------------------------------------------+
//| Close all trades                                                 |
//+------------------------------------------------------------------+
void CloseAllTrades()
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if (PositionGetInteger(POSITION_MAGIC) == MagicNumber)
      {
         string symbol = PositionGetString(POSITION_SYMBOL);
         trade.PositionClose(symbol);
      }
   }
   emergencyMode = false;
   emergencyHedgeCount = 0;
}

//+------------------------------------------------------------------+
//| Update highest equity                                            |
//+------------------------------------------------------------------+
void UpdateHighestEquity()
{
   double currentEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   if(currentEquity > highestEquity)
   {
      highestEquity = currentEquity;
   }
}