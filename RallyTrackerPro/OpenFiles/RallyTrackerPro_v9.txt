//+------------------------------------------------------------------+
//| Expert Advisor: Dynamic Hedging Martingale                       |
//|                Reverse Trigger Distances Version                |
//+------------------------------------------------------------------+
#property strict
#property indicator_chart_window

input bool     EnableStrategy      = true;
input bool     EnableEquityStop    = false;       // Enable/disable equity stop protection
input double   MaxEquityDrawdownPercent = 20.0;   // Max allowed equity drawdown percentage (if enabled)
input int      ConsecutiveCandles  = 2;
input double   InitialLotSize      = 0.01;
input double   LotMultiplier       = 1.5;         // Multiplier for each subsequent hedge position
input int      InitialTPPips       = 100;        // Take-profit in pips
input int      TotalLotCounts      = 30;         // Total number of hedge positions
input int      IntervalPips        = 500;        // Fixed interval between hedges in pips
input int      ProfitTargetPips    = 1000;       // Total profit target in pips
input int      MagicNumber         = 123456;
input bool     UseEMAFilter        = true;       // Enable/disable 200 EMA filter
input int      EMA_Period          = 200;        // EMA period for trend filter

#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>
CTrade trade;
CPositionInfo positionInfo;

// Global variables
int direction = 0; // 1 for Buy, -1 for Sell
bool initialTradeOpened = false;
bool equityStopTriggered = false;
datetime lastHedgeTime = 0;
double highestEquity = 0;
double initialEntryPrice = 0;
int emaHandle = INVALID_HANDLE; // Handle for EMA indicator
#define PIP 10

// Objects for displaying information on chart
string beLabel = "BreakEvenLabel";
string rallyLabel = "TotalRallyLabel";
string beValue = "BreakEvenValue";
string rallyValue = "TotalRallyValue";

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Create EMA indicator handle if filter is enabled
   if(UseEMAFilter)
   {
      emaHandle = iMA(_Symbol, _Period, EMA_Period, 0, MODE_EMA, PRICE_CLOSE);
      if(emaHandle == INVALID_HANDLE)
      {
         Print("Failed to create EMA indicator!");
         return(INIT_FAILED);
      }
   }
   
   highestEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   
   // Create chart objects for display
   CreateInfoLabels();
   
   // Print the calculated lot sizes
   PrintCalculatedLotSizes();
   
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Get current EMA value                                            |
//+------------------------------------------------------------------+
double GetEMAValue()
{
   if(emaHandle == INVALID_HANDLE) return 0;
   
   double emaValue[1];
   if(CopyBuffer(emaHandle, 0, 0, 1, emaValue) != 1)
   {
      Print("Failed to copy EMA buffer!");
      return 0;
   }
   
   return emaValue[0];
}


//+------------------------------------------------------------------+
//| Print the calculated lot sizes based on multiplier               |
//+------------------------------------------------------------------+
void PrintCalculatedLotSizes()
{
   string lotSizesStr = "Calculated Lot Sizes: [";
   double currentLot = InitialLotSize;
   
   for(int i = 0; i < TotalLotCounts; i++)
   {
      if(i > 0) currentLot *= LotMultiplier;
      lotSizesStr += DoubleToString(currentLot, 2);
      if(i < TotalLotCounts - 1) lotSizesStr += ", ";
   }
   lotSizesStr += "]";
   
   Print(lotSizesStr);
}

//+------------------------------------------------------------------+
//| Get lot size for the specified position index                    |
//+------------------------------------------------------------------+
double GetLotSize(int positionIndex)
{
   if(positionIndex == 0) return InitialLotSize;
   
   double lotSize = InitialLotSize;
   for(int i = 1; i <= positionIndex; i++)
   {
      lotSize *= LotMultiplier;
   }
   
   return NormalizeDouble(lotSize, 2);
}

//+------------------------------------------------------------------+
//| Check EMA filter condition                                       |
//+------------------------------------------------------------------+
bool CheckEMAFilter(int &dir)
{
   if(!UseEMAFilter) return true; // If filter disabled, always return true
   
   double emaValue = GetEMAValue();
   if(emaValue == 0) return false; // Failed to get EMA value
   
   double currentClose = iClose(_Symbol, _Period, 1);
   
   if(currentClose > emaValue)
   {
      dir = 1; // Only allow buy trades
      return true;
   }
   else if(currentClose < emaValue)
   {
      dir = -1; // Only allow sell trades
      return true;
   }
   
   return false; // Price exactly at EMA - no trades
}


//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // Release EMA indicator handle
   if(emaHandle != INVALID_HANDLE)
   {
      IndicatorRelease(emaHandle);
   }
   
   // Remove chart objects when EA is removed
   ObjectDelete(0, beLabel);
   ObjectDelete(0, rallyLabel);
   ObjectDelete(0, beValue);
   ObjectDelete(0, rallyValue);
}

//+------------------------------------------------------------------+
//| Create information labels on chart                                |
//+------------------------------------------------------------------+
void CreateInfoLabels()
{
   // Break-even label
   ObjectCreate(0, beLabel, OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, beLabel, OBJPROP_CORNER, CORNER_RIGHT_LOWER);
   ObjectSetInteger(0, beLabel, OBJPROP_XDISTANCE, 10);
   ObjectSetInteger(0, beLabel, OBJPROP_YDISTANCE, 60);
   ObjectSetInteger(0, beLabel, OBJPROP_COLOR, clrWhite);
   ObjectSetString(0, beLabel, OBJPROP_TEXT, "Break-even:");
   ObjectSetInteger(0, beLabel, OBJPROP_FONTSIZE, 10);
   
   // Break-even value
   ObjectCreate(0, beValue, OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, beValue, OBJPROP_CORNER, CORNER_RIGHT_LOWER);
   ObjectSetInteger(0, beValue, OBJPROP_XDISTANCE, 100);
   ObjectSetInteger(0, beValue, OBJPROP_YDISTANCE, 60);
   ObjectSetInteger(0, beValue, OBJPROP_COLOR, clrYellow);
   ObjectSetString(0, beValue, OBJPROP_TEXT, "N/A");
   ObjectSetInteger(0, beValue, OBJPROP_FONTSIZE, 10);
   
   // Total rally label
   ObjectCreate(0, rallyLabel, OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, rallyLabel, OBJPROP_CORNER, CORNER_RIGHT_LOWER);
   ObjectSetInteger(0, rallyLabel, OBJPROP_XDISTANCE, 10);
   ObjectSetInteger(0, rallyLabel, OBJPROP_YDISTANCE, 80);
   ObjectSetInteger(0, rallyLabel, OBJPROP_COLOR, clrWhite);
   ObjectSetString(0, rallyLabel, OBJPROP_TEXT, "Total rally:");
   ObjectSetInteger(0, rallyLabel, OBJPROP_FONTSIZE, 10);
   
   // Total rally value
   ObjectCreate(0, rallyValue, OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, rallyValue, OBJPROP_CORNER, CORNER_RIGHT_LOWER);
   ObjectSetInteger(0, rallyValue, OBJPROP_XDISTANCE, 100);
   ObjectSetInteger(0, rallyValue, OBJPROP_YDISTANCE, 80);
   ObjectSetInteger(0, rallyValue, OBJPROP_COLOR, clrYellow);
   ObjectSetString(0, rallyValue, OBJPROP_TEXT, "N/A");
   ObjectSetInteger(0, rallyValue, OBJPROP_FONTSIZE, 10);
}

//+------------------------------------------------------------------+
//| Update information on chart                                       |
//+------------------------------------------------------------------+
void UpdateChartInfo()
{
   int totalPositions = CountOpenTrades();
   
   if(totalPositions == 0)
   {
      ObjectSetString(0, beValue, OBJPROP_TEXT, "N/A");
      ObjectSetString(0, rallyValue, OBJPROP_TEXT, "N/A");
      return;
   }
   
   // Calculate break-even price
   double totalLots = 0;
   double weightedPrice = 0;
   
   for(int i = PositionsTotal()-1; i >=0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if(PositionGetInteger(POSITION_MAGIC) != MagicNumber) continue;
      
      double lot = PositionGetDouble(POSITION_VOLUME);
      double price = PositionGetDouble(POSITION_PRICE_OPEN);
      
      totalLots += lot;
      weightedPrice += lot * price;
   }
   
   if(totalLots > 0)
   {
      double breakEvenPrice = weightedPrice / totalLots;
      double currentPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_BID : SYMBOL_ASK);
      double rallyPips = 0;
      
      if(direction == 1)
         rallyPips = (currentPrice - breakEvenPrice) / (_Point * PIP);
      else
         rallyPips = (breakEvenPrice - currentPrice) / (_Point * PIP);
      
      ObjectSetString(0, beValue, OBJPROP_TEXT, DoubleToString(breakEvenPrice, _Digits));
      ObjectSetString(0, rallyValue, OBJPROP_TEXT, DoubleToString(rallyPips, 1) + " pips");
   }
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   if(!EnableStrategy || equityStopTriggered) return;

   UpdateHighestEquity();
   if(EnableEquityStop && CheckEquityStop())
   {
      equityStopTriggered = true;
      CloseAllTrades();
      Alert("Equity stop triggered! All positions closed.");
      return;
   }

   int totalTrades = CountOpenTrades();
   if(totalTrades == 0)
   {
      // First check EMA filter if enabled
      int emaDirection = 0;
      if(UseEMAFilter && !CheckEMAFilter(emaDirection))
      {
         return; // EMA filter condition not met
      }
      
      // Then check consecutive candles
      if(CheckConsecutiveCandles(direction))
      {
         // If EMA filter is enabled, verify direction matches EMA
         if(UseEMAFilter && direction != emaDirection)
         {
            return; // Direction doesn't match EMA filter
         }
         
         initialTradeOpened = true;
         initialEntryPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
         trade.SetExpertMagicNumber(MagicNumber);
         Print("First Trade at price: ", initialEntryPrice);
         trade.PositionOpen(_Symbol, direction == 1 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL,
                           InitialLotSize, initialEntryPrice,
                           0,
                           initialEntryPrice + (direction == 1 ? InitialTPPips : -InitialTPPips) * PIP * _Point);
      }
   }
   else if(totalTrades < TotalLotCounts)
   {
      ManageHedging();
   }

   double totalProfit = GetTotalUnrealizedProfit();
   if(totalProfit >= ProfitTargetPips * PIP * _Point)
   {
      CloseAllTrades();
      initialTradeOpened = false;
      initialEntryPrice = 0;
   }
   
   // Update chart information on every tick
   UpdateChartInfo();
}

//+------------------------------------------------------------------+
//| Check equity drawdown                                            |
//+------------------------------------------------------------------+
bool CheckEquityStop()
{
   double currentEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   double drawdownPercent = 0;
   
   if(highestEquity > 0)
   {
      drawdownPercent = ((highestEquity - currentEquity) / highestEquity) * 100;
   }
   
   return drawdownPercent >= MaxEquityDrawdownPercent;
}

//+------------------------------------------------------------------+
//| Count open trades                                                |
//+------------------------------------------------------------------+
int CountOpenTrades()
{
   int count = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if (PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         count++;
   }
   return count;
}

//+------------------------------------------------------------------+
//| Check consecutive candles                                        |
//+------------------------------------------------------------------+
bool CheckConsecutiveCandles(int &dir)
{
   bool bullish = true;
   bool bearish = true;
   double openArray[1], closeArray[1];

   for (int i = 1; i <= ConsecutiveCandles; i++)
   {
      if (CopyOpen(_Symbol, _Period, i, 1, openArray) != 1 ||
          CopyClose(_Symbol, _Period, i, 1, closeArray) != 1)
         return false;

      if (closeArray[0] <= openArray[0]) bullish = false;
      if (closeArray[0] >= openArray[0]) bearish = false;
   }

   if (bullish) { dir = 1; return true; }
   if (bearish) { dir = -1; return true; }
   return false;
}

//+------------------------------------------------------------------+
//| Manage hedging with fixed interval                               |
//+------------------------------------------------------------------+
void ManageHedging()
{
   if(initialEntryPrice == 0) return;
    
   double currentPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_BID : SYMBOL_ASK);
   int openCount = CountOpenTrades();
   
   if(openCount >= TotalLotCounts) return;
   
   double triggerPrice = initialEntryPrice;
   if(direction == 1)
   {
      triggerPrice -= openCount * IntervalPips * PIP * _Point;
   }
   else
   {
      triggerPrice += openCount * IntervalPips * PIP * _Point;
   }
   
   bool conditionMet = false;
   if(direction == 1 && currentPrice <= triggerPrice)
   {
      conditionMet = true;
   }
   else if(direction == -1 && currentPrice >= triggerPrice)
   {
      conditionMet = true;
   }
   
   if(conditionMet)
   {
      double lot = GetLotSize(openCount);
      double entryPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
      trade.SetExpertMagicNumber(MagicNumber);
      trade.PositionOpen(_Symbol, direction == 1 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL,
                         lot, entryPrice, 0, 0);
      
      if(openCount == 1)
      {
         RemoveInitialPositionTP();
      }
   }
}

//+------------------------------------------------------------------+
//| Remove TP from initial position                                  |
//+------------------------------------------------------------------+
void RemoveInitialPositionTP()
{
   ulong initialTicket = 0;
   datetime earliestTime = D'3000.01.01';
   
   for(int i = PositionsTotal()-1; i >=0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if(PositionGetInteger(POSITION_MAGIC) != MagicNumber) continue;
      datetime posTime = PositionGetInteger(POSITION_TIME);
      if(posTime < earliestTime)
      {
         earliestTime = posTime;
         initialTicket = ticket;
      }
   }
   
   if(initialTicket == 0) return;
   
   if(positionInfo.SelectByTicket(initialTicket))
   {
      trade.PositionModify(initialTicket, positionInfo.StopLoss(), 0);
      Print("Removed TP from initial position #", initialTicket);
   }
}

//+------------------------------------------------------------------+
//| Get total unrealized profit                                      |
//+------------------------------------------------------------------+
double GetTotalUnrealizedProfit()
{
   double profit = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if (PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         profit += PositionGetDouble(POSITION_PROFIT);
   }
   return profit;
}

//+------------------------------------------------------------------+
//| Close all trades                                                 |
//+------------------------------------------------------------------+
void CloseAllTrades()
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket == 0) continue;
      if (PositionGetInteger(POSITION_MAGIC) == MagicNumber)
      {
         string symbol = PositionGetString(POSITION_SYMBOL);
         trade.PositionClose(symbol);
      }
   }
}

//+------------------------------------------------------------------+
//| Update highest equity                                            |
//+------------------------------------------------------------------+
void UpdateHighestEquity()
{
   double currentEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   if(currentEquity > highestEquity)
   {
      highestEquity = currentEquity;
   }
}