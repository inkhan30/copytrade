//+------------------------------------------------------------------+
//|                 MartingaleBot.mq5 - USD Logic + Fixed Lot       |
//+------------------------------------------------------------------+
#property strict
#include <Trade\Trade.mqh>
CTrade trade;

//+------------------------------------------------------------------+
//| User Inputs                                                      |
//+------------------------------------------------------------------+
enum TRADE_DIRECTION
{
   BUY_ONLY,
   SELL_ONLY,
   BUY_SELL
};
input bool     EnableMartingale     = true;         // Enable Martingale logic
input bool     EnableTakeProfit     = true;         // Enable closing on total profit
input double   FixedLotSize         = 0.01;         // Initial lot size
input double   TakeProfitUSD        = 5.0;          // Close all when profit reaches this
input double   LossThresholdUSD     = 5.0;          // Open next level if loss > this
input int      MaxLevels            = 5;            // Max number of Martingale levels
input TRADE_DIRECTION TradeDirection = BUY_SELL;    // Trade direction: BUY_ONLY, SELL_ONLY, BUY_SELL
input ulong    MagicNumber          = 123456;       // Magic number for EA positions

//+------------------------------------------------------------------+
//| Initialization                                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   if(FixedLotSize <= 0 || MaxLevels < 1 || TakeProfitUSD <= 0 || LossThresholdUSD <= 0)
   {
      Print("Error: Invalid input parameters");
      return(INIT_PARAMETERS_INCORRECT);
   }
   if(AccountInfoInteger(ACCOUNT_MARGIN_MODE) != ACCOUNT_HEDGING)
   {
      Print("Error: This EA requires a hedging account");
      return(INIT_FAILED);
   }
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Helper Functions                                                 |
//+------------------------------------------------------------------+
double GetTotalProfit()
{
   double total = 0.0;
   for(int i = 0; i < PositionsTotal(); i++)
   {
      if(PositionGetSymbol(i) == _Symbol)
         total += PositionGetDouble(POSITION_PROFIT);
   }
   return total;
}

int CountMartingaleLevels()
{
   int count = 0;
   for(int i = 0; i < PositionsTotal(); i++)
   {
      if(PositionGetSymbol(i) == _Symbol && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         count++;
   }
   return count;
}

double CalculateNextLot(int level)
{
   double lotStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
   double lot = FixedLotSize * MathPow(2, level);
   return MathRound(lot / lotStep) * lotStep;
}

//+------------------------------------------------------------------+
//| Open Martingale Order                                            |
//+------------------------------------------------------------------+
void OpenMartingaleOrder()
{
   int level = CountMartingaleLevels();
   if(level >= MaxLevels) return;

   double lot = CalculateNextLot(level);
   if(lot <= 0.0)
   {
      Print("Lot size is 0 â€” check FixedLotSize input.");
      return;
   }

   ENUM_ORDER_TYPE type;
   switch(TradeDirection)
   {
      case BUY_ONLY:  type = ORDER_TYPE_BUY;  break;
      case SELL_ONLY: type = ORDER_TYPE_SELL; break;
      case BUY_SELL:  type = (level % 2 == 0) ? ORDER_TYPE_BUY : ORDER_TYPE_SELL; break;
   }

   double price = (type == ORDER_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK)
                                           : SymbolInfoDouble(_Symbol, SYMBOL_BID);

   trade.SetDeviationInPoints(10);
   trade.SetExpertMagicNumber(MagicNumber);
   bool result = trade.PositionOpen(_Symbol, type, lot, price, 0.0, 0.0);

   if(!result)
      Print("Order failed: ", trade.ResultRetcode(), " - ", trade.ResultRetcodeDescription());
}

//+------------------------------------------------------------------+
//| Main Logic                                                       |
//+------------------------------------------------------------------+
void OnTick()
{
   if(!EnableMartingale && !EnableTakeProfit) return;

   double totalProfit = GetTotalProfit();

   // 1. Close all if profit target hit
   if(EnableTakeProfit && totalProfit >= TakeProfitUSD)
   {
      for(int i = PositionsTotal() - 1; i >= 0; i--)
      {
         if(PositionGetSymbol(i) == _Symbol)
         {
            ulong ticket = PositionGetTicket(i);
            trade.PositionClose(ticket);
         }
      }
      return;
   }

   // 2. Open initial order if none exists
   int levelCount = CountMartingaleLevels();
   if(levelCount == 0 && EnableMartingale)
   {
      OpenMartingaleOrder();
      return;
   }

   // 3. Check total loss and open next step if needed
   if(EnableMartingale && levelCount < MaxLevels)
   {
      if(totalProfit < -LossThresholdUSD)
      {
         OpenMartingaleOrder();
      }
   }
}