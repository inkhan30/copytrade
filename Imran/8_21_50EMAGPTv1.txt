//+------------------------------------------------------------------+
//|                                               EMA_Crossover_EA.mq5 |
//|                        Adapted for XAUUSD Trading                |
//+------------------------------------------------------------------+
#property copyright "OpenAI"
#property version   "1.00"
#property strict

#include <Trade/Trade.mqh>
CTrade trade;

// Input parameters
input double LotSize = 0.1;
input int EMA_Period1 = 8;
input int EMA_Period2 = 21;
input int EMA_Period3 = 50;
input ENUM_TIMEFRAMES TimeFrame = PERIOD_CURRENT;

// Indicator handles
int emaHandle1;
int emaHandle2;
int emaHandle3;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Create EMA handles
   emaHandle1 = iMA(_Symbol, TimeFrame, EMA_Period1, 0, MODE_EMA, PRICE_CLOSE);
   emaHandle2 = iMA(_Symbol, TimeFrame, EMA_Period2, 0, MODE_EMA, PRICE_CLOSE);
   emaHandle3 = iMA(_Symbol, TimeFrame, EMA_Period3, 0, MODE_EMA, PRICE_CLOSE);

   if(emaHandle1 == INVALID_HANDLE || emaHandle2 == INVALID_HANDLE || emaHandle3 == INVALID_HANDLE)
     {
      Print("Failed to create EMA handles");
      return(INIT_FAILED);
     }

   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   // Release indicator handles
   if(emaHandle1 != INVALID_HANDLE) IndicatorRelease(emaHandle1);
   if(emaHandle2 != INVALID_HANDLE) IndicatorRelease(emaHandle2);
   if(emaHandle3 != INVALID_HANDLE) IndicatorRelease(emaHandle3);
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   static datetime lastTime = 0;
   MqlRates rates[];
   if(CopyRates(_Symbol, TimeFrame, 0, 2, rates) <= 0)
      return;

   datetime currentTime = rates[0].time;
   if(currentTime == lastTime)
      return;
   lastTime = currentTime;

   // Retrieve EMA values
   double ema1[], ema2[], ema3[];
   if(CopyBuffer(emaHandle1, 0, 0, 1, ema1) <= 0 ||
      CopyBuffer(emaHandle2, 0, 0, 1, ema2) <= 0 ||
      CopyBuffer(emaHandle3, 0, 0, 1, ema3) <= 0)
     {
      Print("Failed to retrieve EMA values");
      return;
     }

   double emaVal1 = ema1[0];
   double emaVal2 = ema2[0];
   double emaVal3 = ema3[0];

   // Check for existing position
   bool hasPosition = PositionSelect(_Symbol);

   // Buy condition: EMA8 > EMA21 > EMA50
   if(emaVal1 > emaVal2 && emaVal2 > emaVal3)
     {
      if(!hasPosition || PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
        {
         // Close short position if exists
         if(hasPosition && PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
            trade.PositionClose(_Symbol);

         // Open long position
         trade.Buy(LotSize, _Symbol);
         Print("Opened BUY position at price: ", SymbolInfoDouble(_Symbol, SYMBOL_ASK));
        }
     }
   // Sell condition: EMA8 < EMA21 < EMA50
   else if(emaVal1 < emaVal2 && emaVal2 < emaVal3)
     {
      if(!hasPosition || PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
        {
         // Close long position if exists
         if(hasPosition && PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
            trade.PositionClose(_Symbol);

         // Open short position
         trade.Sell(LotSize, _Symbol);
         Print("Opened SELL position at price: ", SymbolInfoDouble(_Symbol, SYMBOL_BID));
        }
     }
   else
     {
      // No clear trend; close existing position
      if(hasPosition)
        {
         trade.PositionClose(_Symbol);
         Print("Closed position due to no clear trend");
        }
     }
  }