#include <Trade/Trade.mqh>

CTrade trade;

// === Input Parameters ===
input double LotSize = 0.1;                  // Base lot size
input ulong StopLossPoints = 200;           // Stop Loss in points
input ulong ProfitStepPoints = 1000;        // Take Profit step in points
input int ConsecutiveBars = 3;              // Bars to confirm trend

// === Martingale Inputs ===
input bool EnableMartingale = true;         // Enable/Disable Martingale
input int MaxMartingaleSteps = 5;           // Max martingale steps
input double LossThresholdUSD = 5.0;        // Loss in USD to trigger martingale
input double LotMultiplier = 2.0;           // Lot multiplier per step

// === Global Variables ===
datetime currentBarTime;
double highestPrice = 0.0;
double lowestPrice = 0.0;
double currentTP = 0.0;
double currentSL = 0.0;
double newTP_Global = 0.0;
double newSL_Global = 0.0;
int martingaleStep = 0;

// === OnInit ===
int OnInit()
{
    currentBarTime = 0;
    return(INIT_SUCCEEDED);
}

// === Trend Signal Check ===
bool CheckBuySignal()
{
    MqlRates rates[4];
    if(CopyRates(_Symbol, _Period, 0, 4, rates) != 4) return false;

    for(int i = 1; i <= ConsecutiveBars; i++)
    {
        if(rates[i].close <= rates[i - 1].close) return false;
    }
    return true;
}

bool CheckSellSignal()
{
    MqlRates rates[4];
    if(CopyRates(_Symbol, _Period, 0, 4, rates) != 4) return false;

    for(int i = 1; i <= ConsecutiveBars; i++)
    {
        if(rates[i].close >= rates[i - 1].close) return false;
    }
    return true;
}

// === Floating Loss in USD ===
double GetFloatingLoss()
{
    if(!PositionSelect(_Symbol)) return 0;

    double entryPrice = PositionGetDouble(POSITION_PRICE_OPEN);
    double volume = PositionGetDouble(POSITION_VOLUME);
    long type = PositionGetInteger(POSITION_TYPE);
    double marketPrice = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_BID)
                                                     : SymbolInfoDouble(_Symbol, SYMBOL_ASK);

    double pointValue = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
    double tickSize = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);
    double profitPerPoint = pointValue / tickSize;

    double lossPoints = (type == POSITION_TYPE_BUY) ? (entryPrice - marketPrice) : (marketPrice - entryPrice);
    return lossPoints * volume / _Point * profitPerPoint;
}

// === Manage Trades ===
void ManageTrades()
{
    bool positionExists = PositionSelect(_Symbol);

    if(!positionExists)
    {
        martingaleStep = 0;  // Reset steps

        if(CheckBuySignal())
        {
            double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
            currentSL = ask - (StopLossPoints * _Point);
            currentTP = ask + (ProfitStepPoints * _Point);
            highestPrice = ask;
            trade.Buy(LotSize, _Symbol, ask, currentSL, currentTP, "Bullish Trend Buy");
        }
        else if(CheckSellSignal())
        {
            double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
            currentSL = bid + (StopLossPoints * _Point);
            currentTP = bid - (ProfitStepPoints * _Point);
            lowestPrice = bid;
            trade.Sell(LotSize, _Symbol, bid, currentSL, currentTP, "Bearish Trend Sell");
        }
    }
    else if(EnableMartingale)
    {
        double loss = GetFloatingLoss();

        if(loss >= LossThresholdUSD && martingaleStep < MaxMartingaleSteps)
        {
            long type = PositionGetInteger(POSITION_TYPE);
            double newLot = LotSize * MathPow(LotMultiplier, martingaleStep + 1);
            double sl, tp;

            if(type == POSITION_TYPE_BUY)
            {
                double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
                sl = ask - (StopLossPoints * _Point);
                tp = ask + (ProfitStepPoints * _Point);
                trade.Buy(newLot, _Symbol, ask, sl, tp, "Martingale Buy Step");
                highestPrice = ask;
            }
            else if(type == POSITION_TYPE_SELL)
            {
                double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
                sl = bid + (StopLossPoints * _Point);
                tp = bid - (ProfitStepPoints * _Point);
                trade.Sell(newLot, _Symbol, bid, sl, tp, "Martingale Sell Step");
                lowestPrice = bid;
            }

            martingaleStep++;
            Print("Martingale Step ", martingaleStep, " triggered with lot ", newLot);
        }
    }
}

// === TP/SL Step Trailing Logic ===
void CheckAndAdjustTPSL()
{
    if(!PositionSelect(_Symbol)) return;

    long type = PositionGetInteger(POSITION_TYPE);
    double price = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK)
                                               : SymbolInfoDouble(_Symbol, SYMBOL_BID);

    double step = ProfitStepPoints * _Point;

    if(type == POSITION_TYPE_BUY)
    {
        if(price > highestPrice) highestPrice = price;

        if(highestPrice >= currentTP)
        {
            double newTP = currentTP + step;
            double newSL = currentTP - step;

            if(newTP_Global < newTP)
            {
                newTP_Global = newTP;
                newSL_Global = newSL;

                if(trade.PositionModify(_Symbol, newSL, newTP))
                {
                    currentTP = newTP;
                    currentSL = newSL;
                    Print("Buy adjusted - TP: ", newTP, " SL: ", newSL);
                }
            }
        }
    }
    else if(type == POSITION_TYPE_SELL)
    {
        if(price < lowestPrice) lowestPrice = price;

        if(lowestPrice <= currentTP)
        {
            double newTP = currentTP - step;
            double newSL = currentTP + step;

            if(newTP_Global == 0)
            {
                newTP_Global = newTP;
                newSL_Global = newSL;

                if(trade.PositionModify(_Symbol, newSL, newTP))
                {
                    currentTP = newTP;
                    currentSL = newSL;
                    Print("Sell adjusted - TP: ", newTP, " SL: ", newSL);
                }
            }
            else
            {
                if(newTP_Global > newTP)
                {
                    if(trade.PositionModify(_Symbol, newSL, newTP))
                    {
                        currentTP = newTP;
                        currentSL = newSL;
                        Print("Sell adjusted - TP: ", newTP, " SL: ", newSL);
                    }
                }
            }
        }
    }
}

// === Main Tick Handler ===
void OnTick()
{
    datetime time[1];
    if(CopyTime(_Symbol, _Period, 0, 1, time) == 1)
    {
        if(currentBarTime != time[0])
        {
            currentBarTime = time[0];
            ManageTrades();
        }
    }
    CheckAndAdjustTPSL();
}
