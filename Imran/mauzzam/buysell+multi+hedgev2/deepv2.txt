//+------------------------------------------------------------------+
//|                                                  MartingaleBot.mq5 |
//|                        Adjusted by ForexAssistant               |
//+------------------------------------------------------------------+
#property copyright "ForexAssistant"
#property version   "1.11"
#property description "Enhanced trend following EA with hedging"

#include <Trade/Trade.mqh>
CTrade trade;

//+------------------------------------------------------------------+
//| Input Parameters                                                 |
//+------------------------------------------------------------------+
input group "Trend Following Settings"
input bool   EnableLotSize1 = true;    // Enable trading for 1 candle
input double LotSize1       = 0.01;    // Lot size for 1 candle
input bool   EnableLotSize2 = true;    // Enable trading for 2 candles
input double LotSize2       = 0.02;    // Lot size for 2 candles
input bool   EnableLotSize3 = true;    // Enable trading for 3 candles
input double LotSize3       = 0.03;    // Lot size for 3 candles
input bool   EnableLotSize4 = true;    // Enable trading for 4 candles
input double LotSize4       = 0.04;    // Lot size for 4 candles
input bool   EnableLotSize5 = true;    // Enable trading for 5 candles
input double LotSize5       = 0.05;    // Lot size for 5 candles
input ulong  StopLossPoints = 200;     // Initial Stop Loss in points
input ulong  ProfitStepPoints = 1000;  // Profit Step in points
input bool   AllowCounterTrades = true; // Allow counter-trend trades

input group "Martingale Hedging"
input bool   EnableMartingaleHedging = true;    // Enable hedging
input ulong  HedgeStartLossPoints = 500;        // Start hedging at loss
input ulong  HedgeProfitClosePoints = 300;      // Close all at profit
input ulong  HedgeSLPoints = 200;               // Hedge SL in points
input ulong  HedgeTPPoints = 500;               // Hedge TP in points

//+------------------------------------------------------------------+
//| Global Variables                                                 |
//+------------------------------------------------------------------+
datetime currentBarTime;
double highestPrice, lowestPrice;
double currentTP, currentSL;
bool hedgeActive = false;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   currentBarTime = 0;
   highestPrice = 0;
   lowestPrice = 0;
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Candle Counting Functions                                        |
//+------------------------------------------------------------------+
int CountBullishCandles()
{
   MqlRates rates[6];
   if(CopyRates(_Symbol, _Period, 0, 6, rates) != 6) return 0;

   int count = 0;
   for(int i = 1; i < 6; i++) {
      if(rates[i].close > rates[i].open) count++;
      else break;
   }
   return count;
}

int CountBearishCandles()
{
   MqlRates rates[6];
   if(CopyRates(_Symbol, _Period, 0, 6, rates) != 6) return 0;

   int count = 0;
   for(int i = 1; i < 6; i++) {
      if(rates[i].close < rates[i].open) count++;
      else break;
   }
   return count;
}

//+------------------------------------------------------------------+
//| Lot Size Management                                              |
//+------------------------------------------------------------------+
double GetLotSize(int candles)
{
   switch(candles) {
      case 1: return EnableLotSize1 ? LotSize1 : 0.0;
      case 2: return EnableLotSize2 ? LotSize2 : 0.0;
      case 3: return EnableLotSize3 ? LotSize3 : 0.0;
      case 4: return EnableLotSize4 ? LotSize4 : 0.0;
      case 5: return EnableLotSize5 ? LotSize5 : 0.0;
      default: return 0.0;
   }
}

//+------------------------------------------------------------------+
//| Position Checking Functions                                      |
//+------------------------------------------------------------------+
bool HasOpenPosition(ENUM_POSITION_TYPE type)
{
   for(int i = PositionsTotal()-1; i >= 0; i--) {
      if(PositionGetTicket(i) && 
         PositionGetString(POSITION_SYMBOL) == _Symbol &&
         PositionGetInteger(POSITION_TYPE) == type)
         return true;
   }
   return false;
}

//+------------------------------------------------------------------+
//| Trade Management                                                 |
//+------------------------------------------------------------------+
void ManageTrades()
{
   int bullish = CountBullishCandles();
   int bearish = CountBearishCandles();
   
   // Debugging output
   Print("Bullish: ", bullish, " | Bearish: ", bearish);
   
   if(bullish == 0 && bearish == 0) return;

   if(bullish > bearish) {
      double lot = GetLotSize(bullish);
      if(lot <= 0.0) return;
      
      if(!HasOpenPosition(POSITION_TYPE_BUY) || AllowCounterTrades) {
         double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
         currentSL = ask - StopLossPoints * _Point;
         currentTP = ask + ProfitStepPoints * _Point;
         highestPrice = ask;
         
         if(trade.Buy(lot, _Symbol, ask, currentSL, currentTP))
            Print("Opened BUY (", bullish, " candles) Lot: ", lot);
      }
   }
   else if(bearish > bullish) {
      double lot = GetLotSize(bearish);
      if(lot <= 0.0) return;
      
      if(!HasOpenPosition(POSITION_TYPE_SELL) || AllowCounterTrades) {
         double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
         currentSL = bid + StopLossPoints * _Point;
         currentTP = bid - ProfitStepPoints * _Point;
         lowestPrice = bid;
         
         if(trade.Sell(lot, _Symbol, bid, currentSL, currentTP))
            Print("Opened SELL (", bearish, " candles) Lot: ", lot);
      }
   }
}

//+------------------------------------------------------------------+
//| Trailing Stop Management                                         |
//+------------------------------------------------------------------+
void CheckAndAdjustTPSL()
{
   if(!PositionSelect(_Symbol)) return;

   long type = PositionGetInteger(POSITION_TYPE);
   double price = type == POSITION_TYPE_BUY ? 
                  SymbolInfoDouble(_Symbol, SYMBOL_BID) : 
                  SymbolInfoDouble(_Symbol, SYMBOL_ASK);

   if(type == POSITION_TYPE_BUY) {
      if(price > highestPrice) highestPrice = price;
      
      if(highestPrice >= currentTP) {
         double newTP = currentTP + ProfitStepPoints * _Point;
         double newSL = currentTP - ProfitStepPoints * _Point;
         
         if(trade.PositionModify(_Symbol, newSL, newTP)) {
            currentTP = newTP;
            currentSL = newSL;
            Print("Adjusted BUY TP/SL: ", newTP, "/", newSL);
         }
      }
   }
   else if(type == POSITION_TYPE_SELL) {
      if(price < lowestPrice) lowestPrice = price;
      
      if(lowestPrice <= currentTP) {
         double newTP = currentTP - ProfitStepPoints * _Point;
         double newSL = currentTP + ProfitStepPoints * _Point;
         
         if(trade.PositionModify(_Symbol, newSL, newTP)) {
            currentTP = newTP;
            currentSL = newSL;
            Print("Adjusted SELL TP/SL: ", newTP, "/", newSL);
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Martingale Hedging System                                        |
//+------------------------------------------------------------------+
void CheckMartingaleHedging()
{
   if(!EnableMartingaleHedging || !PositionSelect(_Symbol)) return;

   long type = PositionGetInteger(POSITION_TYPE);
   double entry = PositionGetDouble(POSITION_PRICE_OPEN);
   double price = type == POSITION_TYPE_BUY ? 
                  SymbolInfoDouble(_Symbol, SYMBOL_BID) : 
                  SymbolInfoDouble(_Symbol, SYMBOL_ASK);
                  
   double lossPoints = MathAbs(entry - price)/_Point;

   if(lossPoints >= HedgeStartLossPoints && !hedgeActive) {
      double lot = PositionGetDouble(POSITION_VOLUME) * 2;
      double hedgeSL = type == POSITION_TYPE_BUY ? 
                       price + HedgeSLPoints * _Point : 
                       price - HedgeSLPoints * _Point;
      double hedgeTP = type == POSITION_TYPE_BUY ? 
                       price - HedgeTPPoints * _Point : 
                       price + HedgeTPPoints * _Point;

      if(type == POSITION_TYPE_BUY) {
         if(trade.Sell(lot, _Symbol, price, hedgeSL, hedgeTP)) {
            hedgeActive = true;
            Print("Opened Hedge SELL: ", lot, " lots");
         }
      }
      else {
         if(trade.Buy(lot, _Symbol, price, hedgeSL, hedgeTP)) {
            hedgeActive = true;
            Print("Opened Hedge BUY: ", lot, " lots");
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Profit Closure Check                                             |
//+------------------------------------------------------------------+
void CheckCombinedProfitClosure()
{
   if(!EnableMartingaleHedging || PositionsTotal() < 2) return;

   double totalProfit = 0;
   for(int i = PositionsTotal()-1; i >= 0; i--) {
      if(PositionGetTicket(i) && 
         PositionGetString(POSITION_SYMBOL) == _Symbol) {
         totalProfit += PositionGetDouble(POSITION_PROFIT);
      }
   }

   if(totalProfit >= HedgeProfitClosePoints * _Point) {
      for(int i = PositionsTotal()-1; i >= 0; i--) {
         if(PositionGetTicket(i) && 
            PositionGetString(POSITION_SYMBOL) == _Symbol) {
            trade.PositionClose(PositionGetInteger(POSITION_TICKET));
         }
      }
      hedgeActive = false;
      Print("Closed all positions with total profit: ", totalProfit);
   }
}

//+------------------------------------------------------------------+
//| Main Expert Tick Function                                        |
//+------------------------------------------------------------------+
void OnTick()
{
   // Check for new trades on every tick
   ManageTrades();
   
   CheckAndAdjustTPSL();
   CheckMartingaleHedging();
   CheckCombinedProfitClosure();
}
//+------------------------------------------------------------------+