#include <Trade/Trade.mqh>

CTrade trade;

// Input parameters
input double LotSize1 = 0.01;   // Lot size for 1 candle
input double LotSize2 = 0.02;   // Lot size for 2 candles
input double LotSize3 = 0.03;   // Lot size for 3 candles
input double LotSize4 = 0.04;   // Lot size for 4 candles
input double LotSize5 = 0.05;   // Lot size for 5 candles
input ulong StopLossPoints = 200;               // Initial Stop Loss in points
input ulong ProfitStepPoints = 1000;            // Profit Step in points
input bool AllowAdditionalTrendTrades = true;   // Allow opening additional trades on new trend signals

// Global variables
datetime currentBarTime;
double highestPrice;
double lowestPrice;
double currentTP;
double currentSL;
double newTP_Global = 0;
double newSL_Global = 0;

// Initialize
int OnInit()
{
    currentBarTime = 0;
    highestPrice = 0;
    lowestPrice = 0;
    return(INIT_SUCCEEDED);
}

// Count bullish candles
int CountBullishCandles()
{
    MqlRates rates[6];
    if(CopyRates(_Symbol, _Period, 0, 6, rates) != 6) return 0;

    int count = 0;
    for(int i = 1; i < 6; i++)
    {
        if(rates[i].close > rates[i].open)
            count++;
        else
            break;
    }
    return count;
}

// Count bearish candles
int CountBearishCandles()
{
    MqlRates rates[6];
    if(CopyRates(_Symbol, _Period, 0, 6, rates) != 6) return 0;

    int count = 0;
    for(int i = 1; i < 6; i++)
    {
        if(rates[i].close < rates[i].open)
            count++;
        else
            break;
    }
    return count;
}

// Determine lot size based on candle count
double GetLotSize(int candles)
{
    switch(candles)
    {
        case 1: return LotSize1;
        case 2: return LotSize2;
        case 3: return LotSize3;
        case 4: return LotSize4;
        case 5: return LotSize5;
        default: return 0.0;
    }
}

bool HasOpenBuy()
{
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        if(PositionGetTicket(i) != -1 &&
           PositionGetString(POSITION_SYMBOL) == _Symbol &&
           PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
            return true;
    }
    return false;
}

bool HasOpenSell()
{
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        if(PositionGetTicket(i) != -1 &&
           PositionGetString(POSITION_SYMBOL) == _Symbol &&
           PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
            return true;
    }
    return false;
}

void ManageTrades()
{
    int bullish = CountBullishCandles();
    int bearish = CountBearishCandles();
    int candles = MathMin(5, MathMax(bullish, bearish));
    if(candles == 0) return;

    double lot = GetLotSize(candles);
    if(lot <= 0.0) return;

    if(bullish > 0 && (!HasOpenBuy() || AllowAdditionalTrendTrades))
    {
        double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
        currentSL = ask - (StopLossPoints * _Point);
        currentTP = ask + (ProfitStepPoints * _Point);
        highestPrice = ask;
        if(trade.Buy(lot, _Symbol, ask, currentSL, currentTP, "Bullish Trend Buy"))
            Print("New BUY opened with lot: ", lot);
    }
    else if(bearish > 0 && (!HasOpenSell() || AllowAdditionalTrendTrades))
    {
        double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
        currentSL = bid + (StopLossPoints * _Point);
        currentTP = bid - (ProfitStepPoints * _Point);
        lowestPrice = bid;
        if(trade.Sell(lot, _Symbol, bid, currentSL, currentTP, "Bearish Trend Sell"))
            Print("New SELL opened with lot: ", lot);
    }
}

void CheckAndAdjustTPSL()
{
    if(!PositionSelect(_Symbol)) return;

    long type = PositionGetInteger(POSITION_TYPE);
    double price = (type == POSITION_TYPE_BUY) ?
        SymbolInfoDouble(_Symbol, SYMBOL_ASK) :
        SymbolInfoDouble(_Symbol, SYMBOL_BID);

    double step = ProfitStepPoints * _Point;

    if(type == POSITION_TYPE_BUY)
    {
        if(price > highestPrice) highestPrice = price;

        if(highestPrice >= currentTP)
        {
            double newTP = currentTP + step;
            double newSL = currentTP - step;

            if(newTP_Global < newTP)
            {
                newTP_Global = newTP;
                newSL_Global = newSL;
                if(trade.PositionModify(_Symbol, newSL, newTP))
                {
                    currentTP = newTP;
                    currentSL = newSL;
                    Print("Buy adjusted - TP: ", newTP, " SL: ", newSL);
                }
            }
        }
    }
    else if(type == POSITION_TYPE_SELL)
    {
        if(price < lowestPrice) lowestPrice = price;

        if(lowestPrice <= currentTP)
        {
            double newTP = currentTP - step;
            double newSL = currentTP + step;

            if(newTP_Global == 0)
            {
                newTP_Global = newTP;
                newSL_Global = newSL;

                if(trade.PositionModify(_Symbol, newSL, newTP))
                {
                    currentTP = newTP;
                    currentSL = newSL;
                    Print("Sell adjusted - TP: ", newTP, " SL: ", newSL);
                }
            }
            else
            {
                if(newTP_Global > newTP)
                {
                    if(trade.PositionModify(_Symbol, newSL, newTP))
                    {
                        currentTP = newTP;
                        currentSL = newSL;
                        Print("Sell adjusted - TP: ", newTP, " SL: ", newSL);
                    }
                }
            }
        }
    }
}

void OnTick()
{
    datetime time[1];
    if(CopyTime(_Symbol, _Period, 0, 1, time) == 1)
    {
        if(currentBarTime != time[0])
        {
            currentBarTime = time[0];
            ManageTrades();
        }
    }
    CheckAndAdjustTPSL();
}
