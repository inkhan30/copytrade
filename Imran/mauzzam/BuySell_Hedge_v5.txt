#include <Trade/Trade.mqh>

CTrade trade;

// Input parameters
input double LotSize = 0.01;              // Base lot size
input ulong StopLossPoints = 8500;        // Initial Stop Loss in points
input ulong ProfitStepPoints = 1200;      // Profit Step in points
input int ConsecutiveBars = 2;            // Number of consecutive bars for trend confirmation
input bool EnableHedging = true;          // Enable/Disable hedging feature
input double HedgeMultiplier = 2.0;       // Lot size multiplier for hedge trades

// Global variables
datetime currentBarTime;
double highestPrice;    // For buy positions
double lowestPrice;     // For sell positions
double currentTP;
double currentSL;
double newTP_Global = 0;
double newSL_Global = 0;
bool hedgeOpened = false; // Flag to track if hedge was opened
double originalEntryPrice = 0;
double hedgeEntryPrice = 0;

int OnInit()
{
    currentBarTime = 0;
    highestPrice = 0;
    lowestPrice = 0;
    hedgeOpened = false;
    newTP_Global = 0;
    newSL_Global = 0;
    originalEntryPrice = 0;
    hedgeEntryPrice = 0;
    return(INIT_SUCCEEDED);
}

bool CheckBuySignal()
{
    MqlRates rates[4];
    if(CopyRates(_Symbol, _Period, 0, 4, rates) != 4) return false;

    // Check for consecutive bullish candles
    for(int i = 1; i <= ConsecutiveBars; i++)
    {
        if(rates[i].close <= rates[i-1].close) return false;
    }
    return true;
}

bool CheckSellSignal()
{
    MqlRates rates[4];
    if(CopyRates(_Symbol, _Period, 0, 4, rates) != 4) return false;

    // Check for consecutive bearish candles
    for(int i = 1; i <= ConsecutiveBars; i++)
    {
        if(rates[i].close >= rates[i-1].close) return false;
    }
    return true;
}

void ManageTrades()
{
    bool positionExists = PositionSelect(_Symbol);

    if(!positionExists)
    {
        hedgeOpened = false; // Reset flag when no positions exist
        if(CheckBuySignal())
        {
            double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
            currentSL = ask - (StopLossPoints * _Point);
            currentTP = ask + (ProfitStepPoints * _Point);
            highestPrice = ask;
            originalEntryPrice = ask;
            trade.Buy(LotSize, _Symbol, ask, currentSL, currentTP, "Bullish Trend Buy");
        }
        else if(CheckSellSignal())
        {
            double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
            currentSL = bid + (StopLossPoints * _Point);
            currentTP = bid - (ProfitStepPoints * _Point);
            lowestPrice = bid;
            originalEntryPrice = bid;
            trade.Sell(LotSize, _Symbol, bid, currentSL, currentTP, "Bearish Trend Sell");
        }
    }
}

void CheckHedgeCondition()
{
    if(!EnableHedging || hedgeOpened || !PositionSelect(_Symbol)) return;

    long type = PositionGetInteger(POSITION_TYPE);
    double entryPrice = PositionGetDouble(POSITION_PRICE_OPEN);
    double currentPrice = type == POSITION_TYPE_BUY ? 
                        SymbolInfoDouble(_Symbol, SYMBOL_BID) : 
                        SymbolInfoDouble(_Symbol, SYMBOL_ASK);

    double halfSLDistance = StopLossPoints * _Point / 2.0;

    if(type == POSITION_TYPE_BUY)
    {
        if(currentPrice <= (entryPrice - halfSLDistance))
        {
            double hedgeLotSize = LotSize * HedgeMultiplier;
            double hedgeSL = currentPrice + (StopLossPoints * _Point / 2.0);
            double hedgeTP = currentPrice + (StopLossPoints * _Point);

            if(trade.Sell(hedgeLotSize, _Symbol, currentPrice, hedgeSL, hedgeTP, "Hedge Sell Trade"))
            {
                hedgeOpened = true;
                hedgeEntryPrice = currentPrice;
                Print(StringFormat("Opened hedge sell: Lot=%.2f, SL=%f", hedgeLotSize, hedgeSL));
            }
        }
    }
    else if(type == POSITION_TYPE_SELL)
    {
        if(currentPrice >= (entryPrice + halfSLDistance))
        {
            double hedgeLotSize = LotSize * HedgeMultiplier;
            double hedgeSL = currentPrice - (StopLossPoints * _Point / 2.0);
            double hedgeTP = currentPrice - (StopLossPoints * _Point);

            if(trade.Buy(hedgeLotSize, _Symbol, currentPrice, hedgeSL, hedgeTP, "Hedge Buy Trade"))
            {
                hedgeOpened = true;
                hedgeEntryPrice = currentPrice;
                Print(StringFormat("Opened hedge buy: Lot=%.2f, SL=%f", hedgeLotSize, hedgeSL));
            }
        }
    }
}

void CheckBreakEvenAndClose()
{
    if(!hedgeOpened || PositionsTotal() != 2) return;

    PositionSelect(_Symbol);
    long type1 = PositionGetInteger(POSITION_TYPE);
    double profit1 = PositionGetDouble(POSITION_PROFIT);
    double volume1 = PositionGetDouble(POSITION_VOLUME);

    for(int i = 0; i < PositionsTotal(); i++)
    {
        ulong ticket = PositionGetTicket(i);
        if(PositionGetString(POSITION_SYMBOL) == _Symbol && ticket != PositionGetInteger(POSITION_TICKET))
        {
            PositionSelectByTicket(ticket);
            long type2 = PositionGetInteger(POSITION_TYPE);
            double profit2 = PositionGetDouble(POSITION_PROFIT);
            double volume2 = PositionGetDouble(POSITION_VOLUME);

            if(type1 != type2 && (profit1 + profit2) >= 0)
            {
                trade.PositionClose(PositionGetInteger(POSITION_TICKET));
                trade.PositionClose(ticket);
                hedgeOpened = false;
                Print("Closed both positions at break-even or profit");
                break;
            }
        }
    }
}

void CheckAndAdjustTPSL()
{
    if(!PositionSelect(_Symbol)) return;

    long type = PositionGetInteger(POSITION_TYPE);
    double price = type == POSITION_TYPE_BUY ? 
                 SymbolInfoDouble(_Symbol, SYMBOL_ASK) : 
                 SymbolInfoDouble(_Symbol, SYMBOL_BID);

    double step = ProfitStepPoints * _Point;

    if(!hedgeOpened)
    {
        if(type == POSITION_TYPE_BUY)
        {
            if(price > highestPrice) highestPrice = price;
            if(highestPrice >= currentTP)  
            {
                double newTP = currentTP + step;
                double newSL = currentTP - (step/2);
                if(newTP_Global < newTP)
                {              
                    newTP_Global = newTP;
                    newSL_Global = newSL;
                    if(trade.PositionModify(_Symbol, newSL, newTP))
                    {
                        currentTP = newTP;
                        currentSL = newSL;
                    }
                }
            }
        }
        else if(type == POSITION_TYPE_SELL)
        {
            if(price < lowestPrice) lowestPrice = price;
            if(lowestPrice <= currentTP)
            {
                double newTP = currentTP - step;
                double newSL = currentTP + (step/2);
                if(newTP_Global == 0 || newTP_Global > newTP)
                {
                    if(trade.PositionModify(_Symbol, newSL, newTP))
                    {
                        currentTP = newTP;
                        currentSL = newSL;
                        newTP_Global = newTP;
                    }
                }
            }
        }
    }
}

void OnTick()
{
    datetime time[1];
    if(CopyTime(_Symbol, _Period, 0, 1, time) == 1)
    {
        if(currentBarTime != time[0])
        {
            currentBarTime = time[0];
            ManageTrades();
        }
    }

    CheckAndAdjustTPSL();
    CheckHedgeCondition();
    CheckBreakEvenAndClose();
}
