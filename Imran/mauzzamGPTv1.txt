//+------------------------------------------------------------------+
//|                                                  HedgeEA.mq5     |
//|               Trend + Counter + Hedge + Custom Timeframe        |
//+------------------------------------------------------------------+
#include <Trade/Trade.mqh>

CTrade   trade;

//+------------------------------------------------------------------+
//| INPUT PARAMETERS                                                 |
//+------------------------------------------------------------------+
input ENUM_TIMEFRAMES TradeTimeframe = PERIOD_CURRENT;  // Timeframe to run signals on
input double         LotSize           = 0.01;         // Base lot size
input ulong          StopLossPoints    = 5000;         // Initial SL in points
input ulong          ProfitStepPoints  = 1200;         // TP‐step in points
input int            ConsecutiveBars   = 3;            // Bars to confirm trend
input bool           EnableCounterTrade = true;        // 50%‐SL counter trade
input bool           EnableHedging     = true;         // Hedge when a loss threshold is hit
input double         LossThreshold     = 5.0;          // $ loss to trigger a hedge
input double         ProfitTarget      = 2.0;          // $ total profit to close all trades
input int            MaxSimultaneousHedges = 5;        // Cap on number of hedges
input ulong          MagicNumber       = 123456;       // Magic number for all orders

//+------------------------------------------------------------------+
//| GLOBALS                                                          |
//+------------------------------------------------------------------+
datetime currentBarTime = 0;
double   highestPrice, lowestPrice;
double   currentTP, currentSL;
double   newTP_Global = 0.0, newSL_Global = 0.0;
bool     counterTradeOpened = false;

//+------------------------------------------------------------------+
//| Expert initialization                                           |
//+------------------------------------------------------------------+
int OnInit()
  {
   trade.SetExpertMagicNumber(MagicNumber);
   currentBarTime     = 0;
   highestPrice       = 0.0;
   lowestPrice        = 0.0;
   currentTP          = 0.0;
   currentSL          = 0.0;
   newTP_Global       = 0.0;
   newSL_Global       = 0.0;
   counterTradeOpened = false;
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Check for bullish trend signal                                  |
//+------------------------------------------------------------------+
bool CheckBuySignal()
  {
   MqlRates rates[];
   if(CopyRates(_Symbol, TradeTimeframe, 0, ConsecutiveBars+1, rates)
      != ConsecutiveBars+1)
      return(false);
   for(int i=1; i<=ConsecutiveBars; i++)
     if(rates[i].close <= rates[i-1].close)
        return(false);
   return(true);
  }

//+------------------------------------------------------------------+
//| Check for bearish trend signal                                  |
//+------------------------------------------------------------------+
bool CheckSellSignal()
  {
   MqlRates rates[];
   if(CopyRates(_Symbol, TradeTimeframe, 0, ConsecutiveBars+1, rates)
      != ConsecutiveBars+1)
      return(false);
   for(int i=1; i<=ConsecutiveBars; i++)
     if(rates[i].close >= rates[i-1].close)
        return(false);
   return(true);
  }

//+------------------------------------------------------------------+
//| Open initial trend‐following trades                             |
//+------------------------------------------------------------------+
void ManageTrend()
  {
   if(PositionSelect(_Symbol)) return;

   double price;
   if(CheckBuySignal())
     {
      price       = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
      currentSL   = price - StopLossPoints*_Point;
      currentTP   = price + ProfitStepPoints*_Point;
      highestPrice= price;
      trade.Buy(LotSize, _Symbol, price, currentSL, currentTP, "Trend-Buy");
      counterTradeOpened = false;
     }
   else if(CheckSellSignal())
     {
      price       = SymbolInfoDouble(_Symbol, SYMBOL_BID);
      currentSL   = price + StopLossPoints*_Point;
      currentTP   = price - ProfitStepPoints*_Point;
      lowestPrice = price;
      trade.Sell(LotSize, _Symbol, price, currentSL, currentTP, "Trend-Sell");
      counterTradeOpened = false;
     }
  }

//+------------------------------------------------------------------+
//| Original 50%‐SL counter trade                                   |
//+------------------------------------------------------------------+
void ManageCounter()
  {
   if(!EnableCounterTrade || counterTradeOpened || !PositionSelect(_Symbol))
      return;

   long   type    = PositionGetInteger(POSITION_TYPE);
   double entry   = PositionGetDouble (POSITION_PRICE_OPEN);
   double current = (type==POSITION_TYPE_BUY)
                     ? SymbolInfoDouble(_Symbol,SYMBOL_BID)
                     : SymbolInfoDouble(_Symbol,SYMBOL_ASK);
   double halfSL  = StopLossPoints*_Point/2.0;

   if(type==POSITION_TYPE_BUY && current <= entry-halfSL)
     {
      if(trade.Sell(LotSize,_Symbol,current,
                    current + StopLossPoints*_Point,
                    current - ProfitStepPoints*_Point,
                    "Counter-Sell"))
         counterTradeOpened = true;
     }
   else if(type==POSITION_TYPE_SELL && current >= entry+halfSL)
     {
      if(trade.Buy(LotSize,_Symbol,current,
                   current - StopLossPoints*_Point,
                   current + ProfitStepPoints*_Point,
                   "Counter-Buy"))
         counterTradeOpened = true;
     }
  }

//+------------------------------------------------------------------+
//| Trailing TP/SL step logic                                       |
//+------------------------------------------------------------------+
void ManageTrail()
  {
   if(!PositionSelect(_Symbol)) return;

   long   type  = PositionGetInteger(POSITION_TYPE);
   double price = (type==POSITION_TYPE_BUY)
                   ? SymbolInfoDouble(_Symbol,SYMBOL_ASK)
                   : SymbolInfoDouble(_Symbol,SYMBOL_BID);
   double step  = ProfitStepPoints*_Point;

   if(type==POSITION_TYPE_BUY)
     {
      if(price > highestPrice) highestPrice = price;
      if(highestPrice >= currentTP)
        {
         double newTP = currentTP + step;
         double newSL = currentTP - step/2;
         if(newTP_Global < newTP && trade.PositionModify(_Symbol,newSL,newTP))
           {
            currentTP    = newTP;
            currentSL    = newSL;
            newTP_Global = newTP;
            newSL_Global = newSL;
           }
        }
     }
   else // SELL
     {
      if(price < lowestPrice) lowestPrice = price;
      if(lowestPrice <= currentTP)
        {
         double newTP = currentTP - step;
         double newSL = currentTP + step/2;
         if((newTP_Global > newTP || newTP_Global==0.0)
            && trade.PositionModify(_Symbol,newSL,newTP))
           {
            currentTP    = newTP;
            currentSL    = newSL;
            newTP_Global = newTP;
            newSL_Global = newSL;
           }
        }
     }
  }

//+------------------------------------------------------------------+
//| New: Hedge‐on‐loss logic                                         |
//+------------------------------------------------------------------+
void ManageHedges()
  {
   if(!EnableHedging) return;

   double totalProfit = 0.0;
   int    hedgeCount  = 0;
   int    totalPos    = PositionsTotal();

   // 1) compute total profit & count existing hedges
   for(int idx=0; idx<totalPos; idx++)
     {
      ulong ticket = PositionGetTicket(idx);
      if(!PositionSelect(ticket)) continue;
      if(PositionGetString(POSITION_SYMBOL) != _Symbol) continue;
      double prof = PositionGetDouble(POSITION_PROFIT);
      totalProfit += prof;
      if(StringFind(PositionGetString(POSITION_COMMENT),"HEDGE_")==0)
         hedgeCount++;
     }

   // 2) if profit target reached, close all
   if(totalProfit >= ProfitTarget && totalPos>0)
     {
      for(int idx=totalPos-1; idx>=0; idx--)
        {
         ulong ticket = PositionGetTicket(idx);
         if(!PositionSelect(ticket)) continue;
         if(PositionGetString(POSITION_SYMBOL) != _Symbol) continue;
         trade.PositionClose(ticket);
        }
      counterTradeOpened = false;
      newTP_Global = newSL_Global = 0.0;
      return;
     }

   // 3) otherwise, if any single pos is losing past threshold → open one hedge
   if(hedgeCount < MaxSimultaneousHedges)
     {
      for(int idx=0; idx<totalPos; idx++)
        {
         ulong ticket = PositionGetTicket(idx);
         if(!PositionSelect(ticket)) continue;
         if(PositionGetString(POSITION_SYMBOL) != _Symbol) continue;
         double prof = PositionGetDouble(POSITION_PROFIT);
         if(prof <= -LossThreshold)
           {
            long type = PositionGetInteger(POSITION_TYPE);
            double price = (type==POSITION_TYPE_BUY)
                            ? SymbolInfoDouble(_Symbol,SYMBOL_BID)
                            : SymbolInfoDouble(_Symbol,SYMBOL_ASK);
            string tag = "HEDGE_"+IntegerToString((int)TimeCurrent());
            if(type==POSITION_TYPE_BUY)
               trade.Sell(LotSize,_Symbol,price,
                          price + StopLossPoints*_Point,
                          price - ProfitStepPoints*_Point,
                          tag);
            else
               trade.Buy(LotSize,_Symbol,price,
                         price - StopLossPoints*_Point,
                         price + ProfitStepPoints*_Point,
                         tag);
            break; // only one hedge per tick
           }
        }
     }
  }

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   // run trend logic once per new bar on TradeTimeframe
   datetime t[1];
   if(CopyTime(_Symbol, TradeTimeframe, 0, 1, t) == 1 && t[0] != currentBarTime)
     {
      currentBarTime = t[0];
      ManageTrend();
     }

   ManageTrail();
   ManageCounter();
   ManageHedges();
  }
//+------------------------------------------------------------------+
