//+------------------------------------------------------------------+
//|                                                      AutoSLTP.mq5 |
//|                        Copyright 2023, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property description "Adds SL/TP to manual trades with trailing stop"
#property script_show_inputs

// Input parameters
input double   InitialStopLoss   = 50;     // Initial SL (points)
input double   InitialTakeProfit = 100;    // Initial TP (points)
input double   TrailingStop      = 30;     // Trailing Stop (points, 0=disable)
input double   TrailingStep      = 10;     // Trailing Step (points)
input bool     ShowAlerts        = true;   // Show modification alerts

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   if(InitialStopLoss <= 0 && InitialTakeProfit <= 0 && TrailingStop <= 0)
   {
      Alert("EA is disabled - all parameters are zero!");
      return(INIT_PARAMETERS_INCORRECT);
   }
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   ProcessPositions();
}

//+------------------------------------------------------------------+
//| Process all open positions                                       |
//+------------------------------------------------------------------+
void ProcessPositions()
{
   for(int i = PositionsTotal()-1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(ticket <= 0) continue;
      
      if(!PositionSelectByTicket(ticket)) continue;
      
      string symbol = PositionGetString(POSITION_SYMBOL);
      long pos_type = PositionGetInteger(POSITION_TYPE);
      double open_price = PositionGetDouble(POSITION_PRICE_OPEN);
      double current_sl = PositionGetDouble(POSITION_SL);
      double current_tp = PositionGetDouble(POSITION_TP);
      double bid = SymbolInfoDouble(symbol, SYMBOL_BID);
      double ask = SymbolInfoDouble(symbol, SYMBOL_ASK);
      double point = SymbolInfoDouble(symbol, SYMBOL_POINT);
      
      // Set initial SL/TP if needed
      if(SetInitialSLTP(ticket, symbol, pos_type, open_price, current_sl, current_tp, point))
         continue; // Skip trailing on this tick if we just modified
      
      // Process trailing stop
      if(TrailingStop > 0)
         TrailStopLoss(ticket, symbol, pos_type, bid, ask, current_sl, point);
   }
}

//+------------------------------------------------------------------+
//| Set initial SL and TP                                            |
//+------------------------------------------------------------------+
bool SetInitialSLTP(ulong ticket, string symbol, long pos_type, 
                    double open_price, double current_sl, double current_tp, double point)
{
   bool modified = false;
   double new_sl = current_sl;
   double new_tp = current_tp;
   
   // Calculate initial SL if needed
   if(InitialStopLoss > 0 && current_sl == 0)
   {
      if(pos_type == POSITION_TYPE_BUY)
         new_sl = open_price - InitialStopLoss * point;
      else if(pos_type == POSITION_TYPE_SELL)
         new_sl = open_price + InitialStopLoss * point;
   }
   
   // Calculate initial TP if needed
   if(InitialTakeProfit > 0 && current_tp == 0)
   {
      if(pos_type == POSITION_TYPE_BUY)
         new_tp = open_price + InitialTakeProfit * point;
      else if(pos_type == POSITION_TYPE_SELL)
         new_tp = open_price - InitialTakeProfit * point;
   }
   
   // Check if modification is needed
   if((new_sl != current_sl) || (new_tp != current_tp))
   {
      MqlTradeRequest request = {};
      MqlTradeResult result = {};
      
      request.action    = TRADE_ACTION_SLTP;
      request.position  = ticket;
      request.symbol    = symbol;
      request.sl        = NormalizeDouble(new_sl, (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS));
      request.tp        = NormalizeDouble(new_tp, (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS));
      
      if(OrderSend(request, result))
      {
         if(ShowAlerts)
         {
            string msg = StringFormat("Set SL/TP for #%d\nSL: %.5f\nTP: %.5f",
                          ticket, request.sl, request.tp);
            Alert(msg);
         }
         modified = true;
      }
   }
   return modified;
}

//+------------------------------------------------------------------+
//| Trail stop loss                                                  |
//+------------------------------------------------------------------+
void TrailStopLoss(ulong ticket, string symbol, long pos_type, 
                   double bid, double ask, double current_sl, double point)
{
   double new_sl = current_sl;
   double digits = (double)SymbolInfoInteger(symbol, SYMBOL_DIGITS);
   
   if(pos_type == POSITION_TYPE_BUY)
   {
      double min_sl = SymbolInfoDouble(symbol, SYMBOL_BID) - TrailingStop * point;
      double activation = bid - TrailingStop * point;
      
      if(current_sl == 0) 
         new_sl = activation;
      else if(bid - current_sl > TrailingStep * point)
         new_sl = MathMax(current_sl, min_sl);
   }
   else if(pos_type == POSITION_TYPE_SELL)
   {
      double min_sl = SymbolInfoDouble(symbol, SYMBOL_ASK) + TrailingStop * point;
      double activation = ask + TrailingStop * point;
      
      if(current_sl == 0) 
         new_sl = activation;
      else if(current_sl - ask > TrailingStep * point)
         new_sl = MathMin(current_sl, min_sl);
   }
   
   // Check if modification is needed
   if(new_sl != current_sl)
   {
      MqlTradeRequest request = {};
      MqlTradeResult result = {};
      
      request.action   = TRADE_ACTION_SLTP;
      request.position = ticket;
      request.symbol   = symbol;
      request.sl       = NormalizeDouble(new_sl, (int)digits);
      request.tp       = PositionGetDouble(POSITION_TP); // Keep existing TP
      
      if(OrderSend(request, result) && ShowAlerts)
      {
         string msg = StringFormat("Trailed SL for #%d\nNew SL: %.5f", ticket, new_sl);
         Alert(msg);
      }
   }
}
//+------------------------------------------------------------------+