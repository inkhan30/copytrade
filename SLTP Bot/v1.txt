//+------------------------------------------------------------------+
//|                                        XAUUSD_GridMartingale_Fixed.mq5 |
//|                        Copyright 2025, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.01"
#property description "Fixed Grid Martingale EA for XAUUSD on Exness"

#include <Trade/Trade.mqh>
#include <Trade/PositionInfo.mqh>

//+------------------------------------------------------------------+
//| Input Parameters                                                 |
//+------------------------------------------------------------------+
input double   BaseLot = 0.12;               // Base lot size
input int      GridStep = 40;                // Grid step in points
input int      MaxLevels = 10;               // Maximum grid levels
input double   StopLossDollar = 95.0;        // SL in dollars
input double   TakeProfitDollar = 95.0;      // TP in dollars
input int      MagicNumber = 20250630;       // EA Magic Number
input int      Slippage = 3;                 // Allowed slippage
input double   LotMultiplier = 1.0;          // Lot size multiplier
input int      ConsecutiveLossReset = 1;     // Reset after N wins

//+------------------------------------------------------------------+
//| Global Variables                                                 |
//+------------------------------------------------------------------+
CTrade         trade;
CPositionInfo  position;
int            consecutiveLosses = 0;
int            tradeCount = 0;
string         commentPrefix = "Gold Advance+917869555084";

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   trade.SetExpertMagicNumber(MagicNumber);
   trade.SetDeviationInPoints(Slippage);
   trade.SetMarginMode();
   trade.SetTypeFilling(ORDER_FILLING_FOK);
   
   // Check symbol
   if(_Symbol != "XAUUSD" && _Symbol != "XAUUSDc")
      Alert("Wrong symbol! Should be XAUUSD or XAUUSDc");
   
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   static datetime lastBarTime = 0;
   datetime currentTime = iTime(_Symbol, PERIOD_M1, 0);
   
   // Process once per minute
   if(lastBarTime == currentTime) 
      return;
   
   lastBarTime = currentTime;
   
   // Get current price
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   
   // Trade logic
   if(!HasOpenPosition())
   {
      double lot = CalculateLotSize();
      ENUM_ORDER_TYPE direction = GetTradeDirection();
      
      if(direction != WRONG_VALUE)
      {
         ExecuteTrade(direction, lot, bid, ask);
         tradeCount++;
      }
   }
   else
   {
      ManageOpenPosition(bid, ask);
   }
}

//+------------------------------------------------------------------+
//| Check if there's an open position                                |
//+------------------------------------------------------------------+
bool HasOpenPosition()
{
   return position.SelectByMagic(_Symbol, MagicNumber);
}

//+------------------------------------------------------------------+
//| Calculate dynamic lot size                                       |
//+------------------------------------------------------------------+
double CalculateLotSize()
{
   double lot = BaseLot * MathPow(LotMultiplier, consecutiveLosses);
   return NormalizeDouble(lot, 2);
}

//+------------------------------------------------------------------+
//| Determine trade direction                                        |
//+------------------------------------------------------------------+
ENUM_ORDER_TYPE GetTradeDirection()
{
   // Simple price action strategy
   double open = iOpen(_Symbol, PERIOD_M5, 1);
   double close = iClose(_Symbol, PERIOD_M5, 1);
   
   if(open == 0 || close == 0) 
      return WRONG_VALUE;
   
   double priceChange = (close - open) / SymbolInfoDouble(_Symbol, SYMBOL_POINT);
   
   if(priceChange > GridStep)
      return ORDER_TYPE_SELL;
   else if(priceChange < -GridStep)
      return ORDER_TYPE_BUY;
      
   return WRONG_VALUE;
}

//+------------------------------------------------------------------+
//| Execute trade                                                    |
//+------------------------------------------------------------------+
void ExecuteTrade(ENUM_ORDER_TYPE direction, double lot, double bid, double ask)
{
   double price = (direction == ORDER_TYPE_BUY) ? ask : bid;
   double sl = (direction == ORDER_TYPE_BUY) ? price - StopLossDollar : price + StopLossDollar;
   double tp = (direction == ORDER_TYPE_BUY) ? price + TakeProfitDollar : price - TakeProfitDollar;
   string comment = StringFormat("%s %d", commentPrefix, MagicNumber + tradeCount);
   
   if(direction == ORDER_TYPE_BUY)
      trade.Buy(lot, _Symbol, price, sl, tp, comment);
   else
      trade.Sell(lot, _Symbol, price, sl, tp, comment);
}

//+------------------------------------------------------------------+
//| Manage open positions                                            |
//+------------------------------------------------------------------+
void ManageOpenPosition(double bid, double ask)
{
   long type;
   double openPrice;
   
   if(!position.InfoInteger(POSITION_TYPE, type) || 
      !position.InfoDouble(POSITION_PRICE_OPEN, openPrice))
      return;

   // Calculate price movement
   double priceMove = (type == POSITION_TYPE_BUY) ? (bid - openPrice) : (openPrice - ask);
   double pointsMoved = priceMove / SymbolInfoDouble(_Symbol, SYMBOL_POINT);
   
   if(pointsMoved >= GridStep && tradeCount < MaxLevels)
   {
      // Close current position
      trade.PositionClose(_Symbol);
      
      // Open new position in same direction with larger lot
      double newLot = CalculateLotSize() * (tradeCount + 1.0);
      ExecuteTrade((type == POSITION_TYPE_BUY) ? ORDER_TYPE_BUY : ORDER_TYPE_SELL, newLot, bid, ask);
   }
}

//+------------------------------------------------------------------+
//| Handle trade events                                              |
//+------------------------------------------------------------------+
void OnTrade()
{
   // Update consecutive losses counter
   if(HistorySelect(0, TimeCurrent()))
   {
      int totalDeals = HistoryDealsTotal();
      if(totalDeals > 0)
      {
         ulong dealTicket = HistoryDealGetTicket(totalDeals - 1); // Fixed ulong conversion
         if(dealTicket > 0)
         {
            double profit = HistoryDealGetDouble(dealTicket, DEAL_PROFIT);
            long magic = HistoryDealGetInteger(dealTicket, DEAL_MAGIC);
            
            if(magic == MagicNumber)
            {
               if(profit < 0)
                  consecutiveLosses++;
               else if(consecutiveLosses > 0 && (consecutiveLosses % ConsecutiveLossReset == 0))
                  consecutiveLosses = 0;
            }
         }
      }
   }
}
//+------------------------------------------------------------------+