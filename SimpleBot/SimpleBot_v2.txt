//+------------------------------------------------------------------+
//|                                                      RSITrailPro.mq5 |
//|                        Copyright 2024, DeepSeek Trading          |
//|                                       https://www.deepseek.com    |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024, DeepSeek Trading"
#property link      "https://www.deepseek.com"
#property version   "2.00"

//+------------------------------------------------------------------+
//| Input parameters                                                |
//+------------------------------------------------------------------+
input int      RSIPeriod = 14;               // RSI Period
input int      EMAPeriod = 50;               // EMA Period
input int      MACDFast = 12;                // MACD Fast EMA
input int      MACDSlow = 26;                // MACD Slow EMA
input int      MACDSignal = 9;               // MACD Signal
input int      ATRPeriod = 14;               // ATR Period
input double   TakeProfitMultiplier = 1.5;   // TP Multiplier of ATR
input double   StopLossMultiplier = 1.0;     // SL Multiplier of ATR
input double   MaxRiskPercent = 1.0;         // Max Risk % of Capital
input bool     UseVolatilityFilter = true;   // Enable Volatility Filter
input double   MinATR = 0.0010;              // Minimum ATR to trade
input bool     UseTimeFilter = true;         // Enable Time Filter
input string   TradeStartTime = "08:00";     // Start trading time (Broker time)
input string   TradeEndTime = "17:00";       // End trading time (Broker time)

//+------------------------------------------------------------------+
//| Global variables                                                |
//+------------------------------------------------------------------+
double emaBuffer[];                          // EMA buffer
double rsiBuffer[];                          // RSI buffer
double macdBuffer[];                         // MACD main buffer
double signalBuffer[];                       // MACD signal buffer
double atrBuffer[];                          // ATR buffer
double closePrices[];                        // Close prices array
int emaHandle, rsiHandle, macdHandle, atrHandle;
double currentCapital;
double lastStopLossBuy = 0;
double lastStopLossSell = 0;
datetime lastTradeTime = 0;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Initialize indicators
   emaHandle = iMA(_Symbol, _Period, EMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   rsiHandle = iRSI(_Symbol, _Period, RSIPeriod, PRICE_CLOSE);
   macdHandle = iMACD(_Symbol, _Period, MACDFast, MACDSlow, MACDSignal, PRICE_CLOSE);
   atrHandle = iATR(_Symbol, _Period, ATRPeriod);
   
   // Set buffers
   ArraySetAsSeries(emaBuffer, true);
   ArraySetAsSeries(rsiBuffer, true);
   ArraySetAsSeries(macdBuffer, true);
   ArraySetAsSeries(signalBuffer, true);
   ArraySetAsSeries(atrBuffer, true);
   ArraySetAsSeries(closePrices, true);
   
   // Get current capital
   currentCapital = AccountInfoDouble(ACCOUNT_BALANCE);
   
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   IndicatorRelease(emaHandle);
   IndicatorRelease(rsiHandle);
   IndicatorRelease(macdHandle);
   IndicatorRelease(atrHandle);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // Check if we should trade based on time filter
   if(UseTimeFilter && !IsTradingTime())
      return;
      
   // Update capital
   currentCapital = AccountInfoDouble(ACCOUNT_EQUITY);
   
   // Get indicator values - we need 3 periods for confirmation
   if(CopyBuffer(emaHandle, 0, 0, 3, emaBuffer) < 3 || 
      CopyBuffer(rsiHandle, 0, 0, 3, rsiBuffer) < 3 ||
      CopyBuffer(macdHandle, 0, 0, 3, macdBuffer) < 3 ||
      CopyBuffer(macdHandle, 1, 0, 3, signalBuffer) < 3 ||
      CopyBuffer(atrHandle, 0, 0, 3, atrBuffer) < 3 ||
      CopyClose(_Symbol, _Period, 0, 3, closePrices) < 3)
   {
      Print("Failed to copy indicator buffers");
      return;
   }
   
   // Check for open positions
   CheckOpenPositions();
   
   // Check for new trading signals
   CheckForSignals();
}

//+------------------------------------------------------------------+
//| Check if current time is within trading hours                    |
//+------------------------------------------------------------------+
bool IsTradingTime()
{
   datetime now = TimeCurrent();
   datetime start = StringToTime(TradeStartTime);
   datetime end = StringToTime(TradeEndTime);
   
   // Handle overnight session
   if(end <= start) end += 86400;
   
   MqlDateTime mqlNow, mqlStart, mqlEnd;
   TimeToStruct(now, mqlNow);
   TimeToStruct(start, mqlStart);
   TimeToStruct(end, mqlEnd);
   
   // Compare time components
   int nowTime = mqlNow.hour * 3600 + mqlNow.min * 60 + mqlNow.sec;
   int startTime = mqlStart.hour * 3600 + mqlStart.min * 60 + mqlStart.sec;
   int endTime = mqlEnd.hour * 3600 + mqlEnd.min * 60 + mqlEnd.sec;
   
   return nowTime >= startTime && nowTime <= endTime;
}

//+------------------------------------------------------------------+
//| Check for new trading signals                                    |
//+------------------------------------------------------------------+
void CheckForSignals()
{
   // Get current market information
   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double currentATR = atrBuffer[0];
   
   // Skip if volatility is too low
   if(UseVolatilityFilter && currentATR < MinATR)
      return;
      
   // Calculate dynamic stop and profit levels
   double stopLossDistance = currentATR * StopLossMultiplier;
   double takeProfitDistance = currentATR * TakeProfitMultiplier;
   
   // Check for buy signal with multiple confirmations
   if(IsBuySignal())
   {
      double lotSize = CalculateLotSize(stopLossDistance);
      double stopLoss = ask - stopLossDistance;
      double takeProfit = ask + takeProfitDistance;
      
      // Additional filter: don't trade if we just traded recently
      if(TimeCurrent() - lastTradeTime > PeriodSeconds(_Period) * 2)
      {
         OpenPosition(ORDER_TYPE_BUY, lotSize, stopLoss, takeProfit);
         lastTradeTime = TimeCurrent();
      }
   }
   
   // Check for sell signal with multiple confirmations
   if(IsSellSignal())
   {
      double lotSize = CalculateLotSize(stopLossDistance);
      double stopLoss = bid + stopLossDistance;
      double takeProfit = bid - takeProfitDistance;
      
      // Additional filter: don't trade if we just traded recently
      if(TimeCurrent() - lastTradeTime > PeriodSeconds(_Period) * 2)
      {
         OpenPosition(ORDER_TYPE_SELL, lotSize, stopLoss, takeProfit);
         lastTradeTime = TimeCurrent();
      }
   }
}

//+------------------------------------------------------------------+
//| Check for buy signal conditions                                  |
//+------------------------------------------------------------------+
bool IsBuySignal()
{
   // Basic RSI and price position
   if(rsiBuffer[0] < 55 || closePrices[0] <= emaBuffer[0])
      return false;
   
   // Candle momentum confirmation
   if(closePrices[0] <= closePrices[1] || closePrices[1] <= emaBuffer[1])
      return false;
   
   // MACD confirmation - bullish crossover
   if(macdBuffer[0] <= signalBuffer[0] || macdBuffer[1] <= signalBuffer[1])
      return false;
   
   // Volatility confirmation
   if(atrBuffer[0] < atrBuffer[1])
      return false;
   
   return true;
}

//+------------------------------------------------------------------+
//| Check for sell signal conditions                                 |
//+------------------------------------------------------------------+
bool IsSellSignal()
{
   // Basic RSI and price position
   if(rsiBuffer[0] > 45 || closePrices[0] >= emaBuffer[0])
      return false;
   
   // Candle momentum confirmation
   if(closePrices[0] >= closePrices[1] || closePrices[1] >= emaBuffer[1])
      return false;
   
   // MACD confirmation - bearish crossover
   if(macdBuffer[0] >= signalBuffer[0] || macdBuffer[1] >= signalBuffer[1])
      return false;
   
   // Volatility confirmation
   if(atrBuffer[0] < atrBuffer[1])
      return false;
   
   return true;
}

//+------------------------------------------------------------------+
//| Calculate position size with risk management                     |
//+------------------------------------------------------------------+
double CalculateLotSize(double stopLossDistance)
{
   double tickValue = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
   double tickSize = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);
   double lotStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
   
   if(tickValue == 0 || tickSize == 0)
      return LotSize;
   
   // Calculate risk amount in account currency
   double riskAmount = currentCapital * (MaxRiskPercent / 100);
   
   // Calculate lot size based on risk
   double riskLotSize = (riskAmount / (stopLossDistance / tickSize)) / tickValue;
   
   // Normalize and validate lot size
   riskLotSize = MathFloor(riskLotSize / lotStep) * lotStep;
   double minLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
   double maxLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX);
   riskLotSize = MathMax(minLot, MathMin(maxLot, riskLotSize));
   
   return riskLotSize;
}

// [Rest of the functions (OpenPosition, CheckOpenPositions, ModifyStopLoss, OnChartEvent) 
// remain similar to previous version but with updated SL/TP logic]
//+------------------------------------------------------------------+