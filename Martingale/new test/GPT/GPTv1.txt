//+------------------------------------------------------------------+
//| Expert Advisor: Hedging Martingale Strategy (Inputs in Pips)    |
//+------------------------------------------------------------------+
input bool     EnableStrategy      = true;
input bool     EnableVolumeFilter  = true;        // New: Enable/Disable volume filter
input int      VolumeThreshold     = 5000;        // New: Max tick volume to allow trading
input int      ConsecutiveCandles  = 2;
input double   InitialLotSize      = 0.01;
input int      InitialTPPips       = 10;          // Take profit in pips for initial trade
input string   CustomLotSequence   = "0.02,0.04,0.05,0.06,0.08,0.10,0.12,0.14,0.17,0.21,0.25,0.30,0.36,0.43,0.51,0.62,0.74,0.89,1.06,1.28,1.53,1.84,2.21,2.65,2.90,3.25,3.65,3.95,4.3,4.65";
input int      TriggerPips         = 50;          // Distance to trigger hedge in pips
input int      ProfitTargetPips    = 10;          // Total profit target in pips
input int      MaxTrades           = 30;
input int      MagicNumber         = 123456;

#include <Trade\Trade.mqh>
CTrade trade;

#define PIP 10 // 1 pip = 10 points for 5-digit brokers like XAUUSD

int direction = 0; // 1 for Buy, -1 for Sell
bool initialTradeOpened = false;
double initialPrice = 0;
double lotSequence[];

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   StringToLotArray(CustomLotSequence);
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Parse custom lot sequence string                                 |
//+------------------------------------------------------------------+
void StringToLotArray(string str)
{
   string temp[];
   int count = StringSplit(str, ',', temp);
   ArrayResize(lotSequence, count);
   for (int i = 0; i < count; i++)
   {
      lotSequence[i] = StringToDouble(temp[i]);
   }
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   if (!EnableStrategy) return;

   if (EnableVolumeFilter && IsHighVolume()) return;

   int totalTrades = CountOpenTrades();
   if (totalTrades == 0)
   {
      if (CheckConsecutiveCandles(direction))
      {
         initialTradeOpened = true;
         initialPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
         double tp_price = initialPrice + (direction == 1 ? InitialTPPips : -InitialTPPips) * PIP * _Point;
         trade.SetExpertMagicNumber(MagicNumber);
         trade.PositionOpen(_Symbol, direction == 1 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL,
                            InitialLotSize, initialPrice, 0, tp_price);
      }
   }
   else if (totalTrades < MaxTrades)
   {
      ManageHedging();
   }

   double totalProfit = GetTotalUnrealizedProfit();
   if (totalProfit >= ProfitTargetPips * PIP * _Point)
   {
      CloseAllTrades();
      initialTradeOpened = false;
   }
}

//+------------------------------------------------------------------+
//| Check if current bar volume is too high                          |
//+------------------------------------------------------------------+
bool IsHighVolume()
{
   long tick_volume_array[1];
   if (CopyTickVolume(_Symbol, _Period, 0, 1, tick_volume_array) != 1)
      return false;
   return tick_volume_array[0] >= VolumeThreshold;
}

//+------------------------------------------------------------------+
//| Count trades by this EA                                          |
//+------------------------------------------------------------------+
int CountOpenTrades()
{
   int count = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetTicket(i) > 0 && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         count++;
   }
   return count;
}

//+------------------------------------------------------------------+
//| Check for consecutive candles                                    |
//+------------------------------------------------------------------+
bool CheckConsecutiveCandles(int &dir)
{
   bool bullish = true;
   bool bearish = true;
   double openArray[1], closeArray[1];

   for (int i = 1; i <= ConsecutiveCandles; i++)
   {
      if (CopyOpen(_Symbol, _Period, i, 1, openArray) != 1 ||
          CopyClose(_Symbol, _Period, i, 1, closeArray) != 1)
         return false;

      if (closeArray[0] <= openArray[0]) bullish = false;
      if (closeArray[0] >= openArray[0]) bearish = false;
   }

   if (bullish) { dir = 1; return true; }
   if (bearish) { dir = -1; return true; }
   return false;
}

//+------------------------------------------------------------------+
//| Manage hedging trades                                            |
//+------------------------------------------------------------------+
void ManageHedging()
{
   double currentPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
   int openCount = CountOpenTrades();

   if (openCount < ArraySize(lotSequence) + 1)
   {
      double lastEntryPrice = GetLastEntryPrice();
      double distance = MathAbs(currentPrice - lastEntryPrice);
      if (distance >= TriggerPips * PIP * _Point)
      {
         double lot = lotSequence[openCount - 1];
         trade.SetExpertMagicNumber(MagicNumber);
         trade.PositionOpen(_Symbol, direction == 1 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL,
                            lot, currentPrice, 0, 0);
      }
   }
}

//+------------------------------------------------------------------+
//| Get last opened trade price                                      |
//+------------------------------------------------------------------+
double GetLastEntryPrice()
{
   double lastPrice = 0;
   datetime lastTime = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetTicket(i) > 0 && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
      {
         datetime time = (datetime)PositionGetInteger(POSITION_TIME);
         if (time > lastTime)
         {
            lastTime = time;
            lastPrice = PositionGetDouble(POSITION_PRICE_OPEN);
         }
      }
   }
   return lastPrice;
}

//+------------------------------------------------------------------+
//| Get total unrealized profit                                      |
//+------------------------------------------------------------------+
double GetTotalUnrealizedProfit()
{
   double profit = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetTicket(i) > 0 && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         profit += PositionGetDouble(POSITION_PROFIT);
   }
   return profit;
}

//+------------------------------------------------------------------+
//| Close all trades                                                 |
//+------------------------------------------------------------------+
void CloseAllTrades()
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetTicket(i) > 0 && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
      {
         string symbol = PositionGetString(POSITION_SYMBOL);
         trade.PositionClose(symbol);
      }
   }
}
