//+------------------------------------------------------------------+
//| Expert Advisor: Hedging Martingale Strategy                      |
//+------------------------------------------------------------------+
input bool     EnableStrategy      = true;
input int      ConsecutiveCandles  = 2;
input double   InitialLotSize      = 0.01;
input int      InitialTPPoints     = 100;
input string   CustomLotSequence   = "0.02,0.03,0.05";
input int      TriggerPoints       = 500;
input int      ProfitTargetPoints  = 100;
input int      MaxTrades           = 25;
input int      MagicNumber         = 123456;

#include <Trade\Trade.mqh>
CTrade trade;

int direction = 0; // 1 for Buy, -1 for Sell
bool initialTradeOpened = false;
double initialPrice = 0;
double lotSequence[];

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   StringToLotArray(CustomLotSequence);
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Parse custom lot sequence string                                 |
//+------------------------------------------------------------------+
void StringToLotArray(string str)
{
   int count = StringSplit(str, ',', lotSequence);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   if (!EnableStrategy) return;

   // Check if trades exist
   int totalTrades = CountOpenTrades();
   if (totalTrades == 0)
   {
      if (CheckConsecutiveCandles(direction))
      {
         initialTradeOpened = true;
         initialPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
         trade.SetExpertMagicNumber(MagicNumber);
         trade.PositionOpen(_Symbol, direction == 1 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL,
                            InitialLotSize, initialPrice,
                            0, initialPrice + (direction == 1 ? InitialTPPoints : -InitialTPPoints)*_Point);
      }
   }
   else if (totalTrades < MaxTrades)
   {
      ManageHedging();
   }

   // Check for combined profit
   double totalProfit = GetTotalUnrealizedProfit();
   if (totalProfit >= ProfitTargetPoints * _Point)
   {
      CloseAllTrades();
      initialTradeOpened = false;
   }
}

//+------------------------------------------------------------------+
//| Count trades by this EA                                          |
//+------------------------------------------------------------------+
int CountOpenTrades()
{
   int count = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetTicket(i) > 0 && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         count++;
   }
   return count;
}

//+------------------------------------------------------------------+
//| Check for consecutive candles                                    |
//+------------------------------------------------------------------+
bool CheckConsecutiveCandles(int &dir)
{
   bool bullish = true;
   bool bearish = true;
   for (int i = 1; i <= ConsecutiveCandles; i++)
   {
      if (iBar(_Symbol, _Period, i).close <= iBar(_Symbol, _Period, i).open)
         bullish = false;
      if (iBar(_Symbol, _Period, i).close >= iBar(_Symbol, _Period, i).open)
         bearish = false;
   }
   if (bullish) { dir = 1; return true; }
   if (bearish) { dir = -1; return true; }
   return false;
}

//+------------------------------------------------------------------+
//| Manage hedging trades                                            |
//+------------------------------------------------------------------+
void ManageHedging()
{
   double currentPrice = SymbolInfoDouble(_Symbol, direction == 1 ? SYMBOL_ASK : SYMBOL_BID);
   double distance = MathAbs(currentPrice - initialPrice);
   int openCount = CountOpenTrades();

   if (distance >= TriggerPoints * _Point && openCount < ArraySize(lotSequence) + 1)
   {
      double lot = lotSequence[openCount - 1];
      trade.SetExpertMagicNumber(MagicNumber);
      trade.PositionOpen(_Symbol, direction == 1 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL,
                         lot, currentPrice, 0, 0);
   }
}

//+------------------------------------------------------------------+
//| Get total unrealized profit                                      |
//+------------------------------------------------------------------+
double GetTotalUnrealizedProfit()
{
   double profit = 0;
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetTicket(i) > 0 && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
         profit += PositionGetDouble(POSITION_PROFIT);
   }
   return profit;
}

//+------------------------------------------------------------------+
//| Close all trades                                                 |
//+------------------------------------------------------------------+
void CloseAllTrades()
{
   for (int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if (PositionGetTicket(i) > 0 && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
      {
         string symbol = PositionGetString(POSITION_SYMBOL);
         trade.PositionClose(symbol);
      }
   }
}
