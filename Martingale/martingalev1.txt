// working on 2 candle buy login with first trade with tp user define
// sequence manual trade lot size user define
// close all trade with user define value
// all values points


//+------------------------------------------------------------------+
//|                                                      MartingaleEA.mq5 |
//|                        Copyright 2023, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.05"

#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>

//+------------------------------------------------------------------+
//| Input parameters                                                |
//+------------------------------------------------------------------+
 input bool   EnableStrategy       = true;                                       // Enable strategy on/off
 input int    ConsecutiveCandles   = 2;                                          // Number of consecutive candles for initial entry
 input double InitialLotSize       = 0.01;                                       // <-- New: lot size for the very first trade
 input int    InitialTPPoints      = 100;                                        // <-- New: take‑profit for the initial trade, in points
 input string CustomLotSequence    = "0.02,0.04,0.05,0.06,0.08,0.10,0.12,0.14,0.17,0.21,0.25,0.30,0.36,0.43,0.51,0.62,0.74,0.89,1.06,1.28,1.53,1.84,2.21,2.65"; // Lot sizes per trade
 input int    TriggerPoints        = 500;                                         // Points move to trigger next hedge (50 pips = 500 points)
 input int    ProfitTargetPoints   = 100;                                         // Combined profit target in points (10 pips = 100 points)
 input int    MaxTrades            = 25;                                          // Maximum number of hedges
 input ulong  MagicNumber          = 987654;                                      // EA magic number

//+------------------------------------------------------------------+
//| Global variables                                                |
//+------------------------------------------------------------------+
CTrade  trade;                                                                   
int     tradeCount;                                                              
double  entryPrices[];      // store entry prices
double  positionSizes[];    // store lots used
int     tradeTypes[];       // store trade side
double  customLots[];       // parsed lot sizes

//+------------------------------------------------------------------+
//| Initial trade based on candles                                   |
//+------------------------------------------------------------------+
void CheckInitialEntry()
{
  if(iBars(Symbol(), PERIOD_CURRENT) < ConsecutiveCandles + 1) return;
  bool bullish = true, bearish = true;
  for(int i=1; i<=ConsecutiveCandles; i++)
  {
    double o = iOpen(Symbol(), PERIOD_CURRENT, i);
    double c = iClose(Symbol(), PERIOD_CURRENT, i);
    if(c <= o) bullish = false;
    if(c >= o) bearish = false;
  }
  if(!bullish && !bearish) return;

  // determine direction
  ENUM_ORDER_TYPE type = bullish ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;
  // get current price
  double price = (type == ORDER_TYPE_BUY
                  ? SymbolInfoDouble(Symbol(), SYMBOL_ASK)
                  : SymbolInfoDouble(Symbol(), SYMBOL_BID));
  // compute TP price
  double tpPrice = (type == ORDER_TYPE_BUY
                    ? price + InitialTPPoints * _Point
                    : price - InitialTPPoints * _Point);

  // open the initial trade using the new user‑defined lot and TP
  if(trade.PositionOpen(Symbol(), type, 0.01, price, 0, tpPrice, ""))
  {
    tradeCount = 1;
    entryPrices[0]   = price;
    positionSizes[0] = InitialLotSize;    // record the new lot
    tradeTypes[0]    = type;
  }
}

//+------------------------------------------------------------------+
//| Expert initialization                                           |
//+------------------------------------------------------------------+
int OnInit()
{
  if(!ValidateParameters() || !ParseLotSequence())
    return(INIT_PARAMETERS_INCORRECT);

  trade.SetExpertMagicNumber(MagicNumber);
  trade.SetDeviationInPoints(5);

  tradeCount = 0;
  ArrayResize(entryPrices,  MaxTrades);
  ArrayResize(positionSizes,MaxTrades);
  ArrayResize(tradeTypes,   MaxTrades);
  return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Tick processing                                                 |
//+------------------------------------------------------------------+
void OnTick()
{
  if(!EnableStrategy) return;
  if(tradeCount == 0)
  {
    CheckInitialEntry();
    return;
  }
  CheckForNewEntry();
  CheckProfitTarget();
}

//+------------------------------------------------------------------+
//| Validate inputs                                                 |
//+------------------------------------------------------------------+
bool ValidateParameters()
{
  if(ConsecutiveCandles < 1 || TriggerPoints <= 0 || ProfitTargetPoints <= 0 || MaxTrades < 1)
  {
    Alert("Invalid parameters");
    return false;
  }
  if(StringLen(CustomLotSequence) == 0)
  {
    Alert("Empty lot sequence");
    return false;
  }
  return true;
}

//+------------------------------------------------------------------+
//| Parse comma-separated lots                                       |
//+------------------------------------------------------------------+
bool ParseLotSequence()
{
  string parts[];
  int count = StringSplit(CustomLotSequence, ',', parts);
  if(count != MaxTrades)
  {
    Alert("Lot sequence must have " + IntegerToString(MaxTrades) + " entries");
    return false;
  }
  ArrayResize(customLots, MaxTrades);
  for(int i=0; i<MaxTrades; i++)
  {
    double lot = NormalizeLot(StringToDouble(parts[i]));
    if(lot < SymbolInfoDouble(Symbol(), SYMBOL_VOLUME_MIN) || lot > SymbolInfoDouble(Symbol(), SYMBOL_VOLUME_MAX))
    {
      Alert("Lot index " + IntegerToString(i) + " invalid");
      return false;
    }
    customLots[i] = lot;
  }
  return true;
}

//+------------------------------------------------------------------+
//| Initial trade based on candles                                   |
//+------------------------------------------------------------------+


//+------------------------------------------------------------------+
//| Hedging when price moves against entry                          |
//+------------------------------------------------------------------+
void CheckForNewEntry()
{
  if(tradeCount >= MaxTrades) return;
  // Always open hedges in same direction as initial trade
  int   initialType = tradeTypes[0];
  double lastPrice  = entryPrices[tradeCount-1];
  double cur        = (initialType == ORDER_TYPE_BUY
                     ? SymbolInfoDouble(Symbol(), SYMBOL_BID)
                     : SymbolInfoDouble(Symbol(), SYMBOL_ASK));
  double moved      = ((initialType == ORDER_TYPE_BUY)
                     ? (lastPrice - cur) : (cur - lastPrice)) / _Point; // Changed to use points directly
  if(moved < TriggerPoints) return;
  double price = (initialType == ORDER_TYPE_BUY
                ? SymbolInfoDouble(Symbol(), SYMBOL_ASK)
                : SymbolInfoDouble(Symbol(), SYMBOL_BID));
  double lot   = customLots[tradeCount];
  if(trade.PositionOpen(Symbol(), (ENUM_ORDER_TYPE)initialType, lot, price, 0, 0, ""))
  {
    entryPrices[tradeCount]   = price;
    positionSizes[tradeCount] = lot;
    tradeTypes[tradeCount]    = initialType;
    tradeCount++;
  }
}

//+------------------------------------------------------------------+
//| Close when combined profit target reached                       |
//+------------------------------------------------------------------+
void CheckProfitTarget()
{
  double total = 0;
  for(int i=0; i<tradeCount; i++)
  {
    double now = (tradeTypes[i]==ORDER_TYPE_BUY ? SymbolInfoDouble(Symbol(), SYMBOL_BID) : SymbolInfoDouble(Symbol(), SYMBOL_ASK));
    double diff = (now - entryPrices[i]) * (tradeTypes[i]==ORDER_TYPE_BUY ? 1 : -1);
    total += positionSizes[i] * diff;
  }
  if(total/_Point >= ProfitTargetPoints) // Changed to use points directly
  {
    CloseAllPositions();
    ResetStrategy();
  }
}

//+------------------------------------------------------------------+
//| Close all EA-opened positions                                   |
//+------------------------------------------------------------------+
void CloseAllPositions()
{
  int tot = PositionsTotal();
  for(int i=tot-1; i>=0; i--)
  {
    ulong ticket = PositionGetTicket(i);
    if(PositionSelectByTicket(ticket) && PositionGetInteger(POSITION_MAGIC)==MagicNumber)
      trade.PositionClose(ticket);
  }
}

//+------------------------------------------------------------------+
//| Reset internal counters                                         |
//+------------------------------------------------------------------+
void ResetStrategy()
{
  tradeCount = 0;
}

//+------------------------------------------------------------------+
//| Adjust lot to valid step                                        |
//+------------------------------------------------------------------+
double NormalizeLot(double lot)
{
  double step = SymbolInfoDouble(Symbol(), SYMBOL_VOLUME_STEP);
  lot = step * MathFloor(lot/step + 0.5);
  return MathMin(lot, SymbolInfoDouble(Symbol(), SYMBOL_VOLUME_MAX));
}

//+------------------------------------------------------------------+