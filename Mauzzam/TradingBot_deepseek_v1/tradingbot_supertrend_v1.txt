#include <Trade/Trade.mqh>

CTrade trade;

// Input parameters
input double LotSize = 0.1;              // Lot size
input ulong StopLossPoints = 200;        // Stop Loss in points
input ulong TakeProfitPoints = 400;      // Take Profit in points
input int ATRPeriod = 10;                // ATR Period
input double Multiplier = 3.0;           // SuperTrend Multiplier

// Global variables
int atrHandle;
datetime currentBarTime;
int trendDirection = 0;
double superTrendLine = 0;

// Persistent variables for trend calculation
int previousTrend = 0;
double previousUpperBand = 0;
double previousLowerBand = 0;

int OnInit()
{
    atrHandle = iATR(_Symbol, _Period, ATRPeriod);
    if(atrHandle == INVALID_HANDLE)
    {
        Print("Error creating ATR handle");
        return(INIT_FAILED);
    }
    currentBarTime = 0;
    return(INIT_SUCCEEDED);
}

void CalculateSuperTrend()
{
    MqlRates rates[2];
    if(CopyRates(_Symbol, _Period, 1, 2, rates) != 2) return;
    
    double atrVal[1];
    if(CopyBuffer(atrHandle, 0, 1, 1, atrVal) != 1) return;

    double median = (rates[0].high + rates[0].low) / 2.0;
    double upperBand = median + (Multiplier * atrVal[0]);
    double lowerBand = median - (Multiplier * atrVal[0]);

    // Initialize on first run
    if(previousUpperBand == 0 || previousLowerBand == 0)
    {
        previousUpperBand = upperBand;
        previousLowerBand = lowerBand;
        trendDirection = rates[0].close > upperBand ? 1 : -1;
        return;
    }

    // Adjust bands for continuing trends
    if(trendDirection == 1)
    {
        lowerBand = (lowerBand > previousLowerBand) ? lowerBand : previousLowerBand;
        superTrendLine = lowerBand;
    }
    else
    {
        upperBand = (upperBand < previousUpperBand) ? upperBand : previousUpperBand;
        superTrendLine = upperBand;
    }

    // Detect trend changes
    if(rates[0].close > superTrendLine && trendDirection != 1)
    {
        trendDirection = 1;
        superTrendLine = lowerBand;
    }
    else if(rates[0].close < superTrendLine && trendDirection != -1)
    {
        trendDirection = -1;
        superTrendLine = upperBand;
    }

    // Update persistent values
    previousUpperBand = upperBand;
    previousLowerBand = lowerBand;
}

void OnTick()
{
    // Check for new bar
    datetime time[1];
    if(CopyTime(_Symbol, _Period, 0, 1, time) != 1) return;
    if(currentBarTime == time[0]) return;
    currentBarTime = time[0];

    // Calculate SuperTrend values using previous bar's data
    CalculateSuperTrend();

    // Check existing positions
    bool positionExists = false;
    if(PositionSelect(_Symbol))
    {
        long positionType = PositionGetInteger(POSITION_TYPE);
        positionExists = (positionType == POSITION_TYPE_BUY && trendDirection == 1) ||
                         (positionType == POSITION_TYPE_SELL && trendDirection == -1);
    }

    // Manage trades only at new bar
    if(!positionExists)
    {
        if(PositionSelect(_Symbol)) trade.PositionClose(_Symbol);

        if(trendDirection == 1) // Buy signal
        {
            double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
            double sl = ask - (StopLossPoints * _Point);
            double tp = ask + (TakeProfitPoints * _Point);
            trade.Buy(LotSize, _Symbol, ask, sl, tp, "SuperTrend Buy");
        }
        else if(trendDirection == -1) // Sell signal
        {
            double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
            double sl = bid + (StopLossPoints * _Point);
            double tp = bid - (TakeProfitPoints * _Point);
            trade.Sell(LotSize, _Symbol, bid, sl, tp, "SuperTrend Sell");
        }
    }
}