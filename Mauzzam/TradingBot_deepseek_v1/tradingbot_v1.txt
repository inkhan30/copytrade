//+------------------------------------------------------------------+
//|                                                   TradingBot.mq5 |
//|                                    Copyright 2024, YourCompany.  |
//|                                             https://www.yoursite |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024, YourCompany."
#property link      "https://www.yoursite"
#property version   "2.00"

#include <Trade/Trade.mqh>

//+------------------------------------------------------------------+
//| Custom Signal Enum                                              |
//+------------------------------------------------------------------+
enum ENUM_SIGNAL {
   SIGNAL_NONE,  // No signal
   SIGNAL_BUY,   // Buy signal
   SIGNAL_SELL   // Sell signal
};

//+------------------------------------------------------------------+
//| Input Parameters                                                 |
//+------------------------------------------------------------------+
input group "EMA Settings"
input int EMA_Fast_Period = 12;                   // Fast EMA Period
input int EMA_Slow_Period = 26;                   // Slow EMA Period
input bool Use_Close_Price_Filter = true;         // Use close price filter

input group "General Settings"
input ENUM_TIMEFRAMES Timeframe = PERIOD_M5;      // Chart timeframe
input int MaxTradesPerDay = 5;                    // Max trades/day
input bool AllowMultipleTrades = false;           // Allow multiple trades
input double LotSize = 0.1;                       // Trade lot size

input group "Risk Management"
input double RiskPercentage = 1.0;                // Risk % per trade
input int SL_Points = 50;                         // SL in points
input int TP_Points = 100;                        // TP in points
input bool Use_Trailing_SL = true;                // Enable Trailing SL
input int Trailing_SL_Points = 20;                // Trailing SL points
input int Trailing_SL_Activation = 10;            // Trailing activation (points)

input group "Safety Checks"
input double CapitalProtectionPercent = 50.0;     // Min capital %
input int Min_SL_Distance = 10;                   // Min SL distance (points)

input group "Trading Hours"
input bool UseTradingHours = false;               // Enable trading hours
input int TradingStartHour = 8;                   // Start hour (0-23)
input int TradingEndHour = 16;                    // End hour (0-23)

//+------------------------------------------------------------------+
//| Global Variables                                                 |
//+------------------------------------------------------------------+
CTrade Trade;
ulong MagicNumber = 12345;
double InitialCapital;
int DailyTradesCount = 0;
datetime LastTradeDay = 0;

// EMA Handles
int emaFastHandle, emaSlowHandle;
double pointValue;
int digits;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   Trade.SetExpertMagicNumber(MagicNumber);
   InitialCapital = AccountInfoDouble(ACCOUNT_BALANCE);
   
   // Get symbol information
   pointValue = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
   digits = (int)SymbolInfoInteger(_Symbol, SYMBOL_DIGITS);
   
   // Create EMA handles
   emaFastHandle = iMA(_Symbol, Timeframe, EMA_Fast_Period, 0, MODE_EMA, PRICE_CLOSE);
   emaSlowHandle = iMA(_Symbol, Timeframe, EMA_Slow_Period, 0, MODE_EMA, PRICE_CLOSE);
   
   if(emaFastHandle == INVALID_HANDLE || emaSlowHandle == INVALID_HANDLE)
   {
      Print("Error creating EMA handles");
      return(INIT_FAILED);
   }
   
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // Release EMA handles
   IndicatorRelease(emaFastHandle);
   IndicatorRelease(emaSlowHandle);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   CheckDayChange();
   ManageTrailingStops();
   
   if(!CheckTradingConditions()) return;
   
   ENUM_SIGNAL signal = CheckEntrySignal();
   if(signal != SIGNAL_NONE)
   {
      ExecuteTrade(signal);
      DailyTradesCount++;
   }
}

//+------------------------------------------------------------------+
//| Check EMA crossover signals with enhanced filtering              |
//+------------------------------------------------------------------+
ENUM_SIGNAL CheckEntrySignal()
{
   double emaFast[2], emaSlow[2], closePrice[2];
   
   // Get indicator values
   if(CopyBuffer(emaFastHandle, 0, 0, 2, emaFast) < 2 ||
      CopyBuffer(emaSlowHandle, 0, 0, 2, emaSlow) < 2 ||
      CopyClose(_Symbol, Timeframe, 0, 2, closePrice) < 2)
   {
      return SIGNAL_NONE;
   }

   // Normalize values
   emaFast[0] = NormalizeDouble(emaFast[0], digits);
   emaFast[1] = NormalizeDouble(emaFast[1], digits);
   emaSlow[0] = NormalizeDouble(emaSlow[0], digits);
   emaSlow[1] = NormalizeDouble(emaSlow[1], digits);
   
   // Check crossovers
   bool bullishCross = emaFast[0] > emaSlow[0] && emaFast[1] <= emaSlow[1];
   bool bearishCross = emaFast[0] < emaSlow[0] && emaFast[1] >= emaSlow[1];
   
   // Additional filters
   if(bullishCross)
   {
      if(Use_Close_Price_Filter && closePrice[0] < emaSlow[0])
         return SIGNAL_NONE;
      return SIGNAL_BUY;
   }
   
   if(bearishCross)
   {
      if(Use_Close_Price_Filter && closePrice[0] > emaSlow[0])
         return SIGNAL_NONE;
      return SIGNAL_SELL;
   }
   
   return SIGNAL_NONE;
}

//+------------------------------------------------------------------+
//| Execute trade with enhanced risk management                      |
//+------------------------------------------------------------------+
void ExecuteTrade(ENUM_SIGNAL signal)
{
   double price = (signal == SIGNAL_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK) 
                                       : SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double sl = CalculateSL(signal, price);
   double tp = CalculateTP(signal, price);
   
   // Validate SL and TP
   if(!ValidateSL(signal, price, sl)) return;
   if(TP_Points > 0 && !ValidateTP(signal, price, tp)) return;
   
   // Calculate dynamic lot size based on risk
   double lotSize = CalculateLotSize(price, sl);
   
   if(signal == SIGNAL_BUY)
      Trade.Buy(lotSize, _Symbol, price, sl, tp);
   else
      Trade.Sell(lotSize, _Symbol, price, sl, tp);
}

//+------------------------------------------------------------------+
//| Calculate position size based on risk percentage                 |
//+------------------------------------------------------------------+
double CalculateLotSize(double entryPrice, double slPrice)
{
   double riskAmount = AccountInfoDouble(ACCOUNT_EQUITY) * (RiskPercentage / 100);
   double priceDistance = MathAbs(entryPrice - slPrice);
   double tickValue = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
   
   if(priceDistance == 0 || tickValue == 0) return LotSize;
   
   double lots = (riskAmount / (priceDistance / pointValue)) / tickValue;
   return NormalizeDouble(lots, 2);
}

//+------------------------------------------------------------------+
//| Validate stop loss placement                                     |
//+------------------------------------------------------------------+
bool ValidateSL(ENUM_SIGNAL signal, double price, double sl)
{
   double minDistance = Min_SL_Distance * pointValue;
   
   if(signal == SIGNAL_BUY && sl >= price - minDistance)
   {
      Print("Invalid Buy SL: ", sl, " Price: ", price);
      return false;
   }
   
   if(signal == SIGNAL_SELL && sl <= price + minDistance)
   {
      Print("Invalid Sell SL: ", sl, " Price: ", price);
      return false;
   }
   
   return true;
}

// ... [Keep other functions from previous version with improvements] ...