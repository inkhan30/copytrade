//+------------------------------------------------------------------+
//|                                                   TradingBot.mq5 |
//|                                    Copyright 2023, YourCompany.  |
//|                                             https://www.yoursite |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, YourCompany."
#property link      "https://www.yoursite"
#property version   "1.00"

#include <Trade/Trade.mqh>

//+------------------------------------------------------------------+
//| Input Parameters                                                 |
//+------------------------------------------------------------------+
input group "General Settings"
input ENUM_TIMEFRAMES Timeframe = PERIOD_M5;        // Chart timeframe
input int MaxTradesPerDay = 5;                     // Max trades/day
input bool AllowMultipleTrades = false;            // Allow multiple trades
input double LotSize = 0.1;                        // Trade lot size

input group "Risk Management"
input bool Use_SL_Percentage = false;              // Use % for SL
input double SL_Percent = 1.0;                     // SL Percentage (%)
input int SL_Points = 50;                          // SL in points
input bool Use_Trailing_SL = false;                // Enable Trailing SL
input bool Use_Trailing_SL_Percent = false;        // Trailing SL in %
input double Trailing_SL_Percent = 0.5;            // Trailing SL %
input int Trailing_SL_Points = 20;                 // Trailing SL points
input int Trailing_SL_Activation = 10;             // Trailing activation (points)
input bool Use_TakeProfit = false;                 // Enable Take Profit
input int TP_Points = 100;                         // TP in points

input group "Capital Protection"
input double CapitalProtectionPercent = 50.0;      // Min capital %

input group "Trading Hours"
input bool UseTradingHours = false;                // Enable trading hours
input int TradingStartHour = 8;                    // Start hour (0-23)
input int TradingEndHour = 16;                     // End hour (0-23)

//+------------------------------------------------------------------+
//| Global Variables                                                 |
//+------------------------------------------------------------------+
CTrade Trade;
ulong MagicNumber = 12345;
double InitialCapital;
int DailyTradesCount = 0;
datetime LastTradeDay = 0;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   Trade.SetExpertMagicNumber(MagicNumber);
   InitialCapital = AccountInfoDouble(ACCOUNT_BALANCE);
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // Cleanup if needed
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // Check for new day
   CheckDayChange();
   
   // Manage open positions
   ManageTrailingStops();
   
   // Check trading conditions
   if(!CheckTradingConditions()) return;
   
   // Check entry signal
   ENUM_SIGNAL signal = CheckEntrySignal();
   
   // Execute trade if valid signal
   if(signal != SIGNAL_NONE)
   {
      ExecuteTrade(signal);
      DailyTradesCount++;
   }
}

//+------------------------------------------------------------------+
//| Check for new day and reset trade count                          |
//+------------------------------------------------------------------+
void CheckDayChange()
{
   MqlDateTime currTime;
   TimeCurrent(currTime);
   
   if(currTime.day != LastTradeDay)
   {
      DailyTradesCount = 0;
      LastTradeDay = currTime.day;
   }
}

//+------------------------------------------------------------------+
//| Check all trading conditions                                     |
//+------------------------------------------------------------------+
bool CheckTradingConditions()
{
   // Check trading hours
   if(UseTradingHours && !IsWithinTradingHours()) return false;
   
   // Check capital protection
   if(!CheckCapitalProtection()) return false;
   
   // Check maximum daily trades
   if(DailyTradesCount >= MaxTradesPerDay) return false;
   
   // Check existing positions
   if(!AllowMultipleTrades && PositionsTotal() > 0) return false;
   
   return true;
}

//+------------------------------------------------------------------+
//| Check if current time is within trading hours                    |
//+------------------------------------------------------------------+
bool IsWithinTradingHours()
{
   MqlDateTime currTime;
   TimeCurrent(currTime);
   int currentHour = currTime.hour;
   
   if(TradingStartHour <= TradingEndHour)
   {
      if(currentHour < TradingStartHour || currentHour >= TradingEndHour)
         return false;
   }
   else
   {
      if(currentHour < TradingStartHour && currentHour >= TradingEndHour)
         return false;
   }
   return true;
}

//+------------------------------------------------------------------+
//| Check capital protection rule                                    |
//+------------------------------------------------------------------+
bool CheckCapitalProtection()
{
   double currentEquity = AccountInfoDouble(ACCOUNT_EQUITY);
   return (currentEquity >= (InitialCapital * CapitalProtectionPercent / 100.0));
}

//+------------------------------------------------------------------+
//| Check for entry signals (EXAMPLE - MODIFY THIS)                  |
//+------------------------------------------------------------------+
ENUM_SIGNAL CheckEntrySignal()
{
   // Replace this with your actual trading strategy
   double maFast = iMA(_Symbol, Timeframe, 14, 0, MODE_SMA, PRICE_CLOSE, 0);
   double maSlow = iMA(_Symbol, Timeframe, 28, 0, MODE_SMA, PRICE_CLOSE, 0);
   
   if(maFast > maSlow) return SIGNAL_BUY;
   if(maFast < maSlow) return SIGNAL_SELL;
   
   return SIGNAL_NONE;
}

//+------------------------------------------------------------------+
//| Execute trade with risk management                               |
//+------------------------------------------------------------------+
void ExecuteTrade(ENUM_SIGNAL signal)
{
   double price = (signal == SIGNAL_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_ASK) 
                                       : SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double sl = CalculateSL(signal, price);
   double tp = CalculateTP(signal, price);
   
   if(signal == SIGNAL_BUY)
      Trade.Buy(LotSize, _Symbol, price, sl, tp);
   else
      Trade.Sell(LotSize, _Symbol, price, sl, tp);
}

//+------------------------------------------------------------------+
//| Calculate Stop Loss level                                        |
//+------------------------------------------------------------------+
double CalculateSL(ENUM_SIGNAL signal, double price)
{
   if(Use_SL_Percentage)
   {
      return (signal == SIGNAL_BUY) ? price * (1 - SL_Percent / 100) 
                                  : price * (1 + SL_Percent / 100);
   }
   return (signal == SIGNAL_BUY) ? price - SL_Points * _Point 
                               : price + SL_Points * _Point;
}

//+------------------------------------------------------------------+
//| Calculate Take Profit level                                      |
//+------------------------------------------------------------------+
double CalculateTP(ENUM_SIGNAL signal, double price)
{
   if(!Use_TakeProfit) return 0;
   
   return (signal == SIGNAL_BUY) ? price + TP_Points * _Point 
                               : price - TP_Points * _Point;
}

//+------------------------------------------------------------------+
//| Manage trailing stops for open positions                         |
//+------------------------------------------------------------------+
void ManageTrailingStops()
{
   for(int i = PositionsTotal()-1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket) && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
      {
         double currentSL = PositionGetDouble(POSITION_SL);
         double entryPrice = PositionGetDouble(POSITION_PRICE_OPEN);
         ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
         
         double newSL = CalculateTrailingSL(ticket, type, entryPrice, currentSL);
         if(newSL != currentSL)
            Trade.PositionModify(ticket, newSL, PositionGetDouble(POSITION_TP));
      }
   }
}

//+------------------------------------------------------------------+
//| Calculate new trailing stop loss                                 |
//+------------------------------------------------------------------+
double CalculateTrailingSL(ulong ticket, ENUM_POSITION_TYPE type, double entryPrice, double currentSL)
{
   if(!Use_Trailing_SL) return currentSL;
   
   double currentPrice = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(_Symbol, SYMBOL_BID)
                                                   : SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double pointsProfit = (type == POSITION_TYPE_BUY) 
                        ? (currentPrice - entryPrice) / _Point
                        : (entryPrice - currentPrice) / _Point;
   
   if(pointsProfit < Trailing_SL_Activation) return currentSL;
   
   if(Use_Trailing_SL_Percent)
   {
      return (type == POSITION_TYPE_BUY) 
            ? currentPrice * (1 - Trailing_SL_Percent / 100)
            : currentPrice * (1 + Trailing_SL_Percent / 100);
   }
   else
   {
      return (type == POSITION_TYPE_BUY) 
            ? currentPrice - Trailing_SL_Points * _Point
            : currentPrice + Trailing_SL_Points * _Point;
   }
}
//+------------------------------------------------------------------+