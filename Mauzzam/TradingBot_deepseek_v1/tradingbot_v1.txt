//+------------------------------------------------------------------+
//|                                         SimpleScalperBot.mq5     |
//|                        Copyright 2023, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2023, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"

//+------------------------------------------------------------------+
//| Input Parameters                                                 |
//+------------------------------------------------------------------+
input string   StrategySettings="--- Strategy Settings ---";
input int      MAPeriod=14;                 // EMA Period
input ENUM_TIMEFRAMES TimeFrame=PERIOD_M15; // Chart Timeframe
input bool     UseBreakoutStrategy=true;    // Enable Breakout Strategy
input int      BreakoutPeriod=20;           // Breakout Lookback Period

input string   RiskManagement="--- Risk Management ---";
input double   LotSize=0.1;              // Trade Lot Size
input bool     UseMoneyPercentSL=false;  // Use Percentage for SL
input double   StopLoss=50;              // SL (Points or %)
input double   TakeProfit=100;           // Take Profit (Points)
input bool     UseTrailingSL=true;       // Enable Trailing SL
input double   TrailingStep=10;          // Trailing SL Step

input string   TradeSettings="--- Trade Settings ---";
input int      MaxTradesPerDay=10;       // Max Daily Trades
input bool     SingleTrade=true;         // One Trade at a Time
input int      MagicNumber=12345;        // EA Magic Number

input string   TimeSettings="--- Time Settings ---";
input bool     UseTradingHours=false;    // Enable Trading Hours
input int      StartHour=8;              // Trading Start Hour
input int      EndHour=16;               // Trading End Hour

//+------------------------------------------------------------------+
//| Global Variables                                                 |
//+------------------------------------------------------------------+
int            dailyTradesCount=0;       // Track daily trades
datetime       lastTradeDate=0;          // Last trade date
double         initialCapital=0;         // Initial account balance
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
// Store initial capital
   initialCapital=AccountInfoDouble(ACCOUNT_BALANCE);
   ResetDailyCounter();
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
// Remove timer on deinit
   EventKillTimer();
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
// Check for new day
   CheckDayChange();

// Check basic trading conditions
   if(!IsTradingAllowed()) return;

// Check current market conditions
   int signal = CheckTradingSignal();
   if(signal != 0)
     {
      ExecuteTrade(signal);
     }

// Manage open positions
   ManageOpenTrades();
  }
//+------------------------------------------------------------------+
//| Check if trading is allowed                                      |
//+------------------------------------------------------------------+
bool IsTradingAllowed()
  {
// Check account equity protection
   double currentEquity=AccountInfoDouble(ACCOUNT_EQUITY);
   if(currentEquity < initialCapital*0.5)
     {
      Print("Trading stopped: Account below 50% capital protection");
      return false;
     }

// Check trading hours
   if(UseTradingHours && !IsWithinTradingHours())
      return false;

// Check daily trade limit
   if(dailyTradesCount >= MaxTradesPerDay)
     {
      Print("Daily trade limit reached");
      return false;
     }

// Check single trade rule
   if(SingleTrade && PositionsTotal() > 0)
      return false;

   return true;
  }
//+------------------------------------------------------------------+
//| Check trading signal conditions                                  |
//+------------------------------------------------------------------+
int CheckTradingSignal()
  {
// Get indicator values
   double emaValue = iMA(_Symbol,TimeFrame,MAPeriod,0,MODE_EMA,PRICE_CLOSE);
   double currentPrice = SymbolInfoDouble(_Symbol,SYMBOL_BID);

// Trend direction check
   bool bullishTrend = currentPrice > emaValue;
   bool bearishTrend = currentPrice < emaValue;

// Breakout detection
   bool breakoutBuySignal = false;
   bool breakoutSellSignal = false;
   
   if(UseBreakoutStrategy)
     {
      int highestBar = iHighest(_Symbol,TimeFrame,MODE_HIGH,BreakoutPeriod,0);
      int lowestBar = iLowest(_Symbol,TimeFrame,MODE_LOW,BreakoutPeriod,0);
      
      double highestHigh = iHigh(_Symbol,TimeFrame,highestBar);
      double lowestLow = iLow(_Symbol,TimeFrame,lowestBar);
      
      breakoutBuySignal = currentPrice > highestHigh;
      breakoutSellSignal = currentPrice < lowestLow;
     }

// Generate final signals
   bool buySignal = (bullishTrend || breakoutBuySignal);
   bool sellSignal = (bearishTrend || breakoutSellSignal);

   if(buySignal) return 1;
   if(sellSignal) return -1;
   return 0;
  }
//+------------------------------------------------------------------+
//| Execute trade                                                    |
//+------------------------------------------------------------------+
void ExecuteTrade(int direction)
  {
// Calculate SL/TP
   double sl = CalculateStopLoss(direction);
   double tp = CalculateTakeProfit(direction);

// Determine trade direction
   ENUM_ORDER_TYPE orderType = direction > 0 ? ORDER_TYPE_BUY : ORDER_TYPE_SELL;

// Initialize trade request properly
   MqlTradeRequest request;
   ZeroMemory(request);
   request.action = TRADE_ACTION_DEAL;
   request.symbol = _Symbol;
   request.volume = LotSize;
   request.type = orderType;
   request.price = orderType==ORDER_TYPE_BUY ? 
                  SymbolInfoDouble(_Symbol,SYMBOL_ASK) : 
                  SymbolInfoDouble(_Symbol,SYMBOL_BID);
   request.sl = sl;
   request.tp = tp;
   request.deviation = 10;
   request.magic = MagicNumber;

// Send trade request
   MqlTradeResult result;
   if(!OrderSend(request, result))
     {
      Print("Trade execution failed: ", GetLastError());
      return;
     }

// Update trade counters
   dailyTradesCount++;
   lastTradeDate=TimeCurrent();
  }
//+------------------------------------------------------------------+
//| Manage open positions                                            |
//+------------------------------------------------------------------+
void ManageOpenTrades()
  {
// Trailing stop management
   if(UseTrailingSL)
     {
      for(int i=PositionsTotal()-1; i>=0; i--)
        {
         ulong ticket=PositionGetTicket(i);
         if(PositionSelectByTicket(ticket) && PositionGetInteger(POSITION_MAGIC) == MagicNumber)
           {
            double currentSL = PositionGetDouble(POSITION_SL);
            double currentPrice = PositionGetDouble(POSITION_PRICE_CURRENT);
            double newSL = CalculateTrailingStop(currentSL, currentPrice, (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE));
            
            if(newSL != currentSL)
              {
               ModifyPositionSL(ticket, newSL);
              }
           }
        }
     }
  }
//+------------------------------------------------------------------+
//| Calculate trailing stop loss                                     |
//+------------------------------------------------------------------+
double CalculateTrailingStop(double currentSL, double currentPrice, ENUM_POSITION_TYPE positionType)
  {
   double newSL=currentSL;
   double pointsStep=TrailingStep*_Point;
   
   if(positionType == POSITION_TYPE_BUY)
     {
      newSL = currentPrice - pointsStep;
      return (newSL > currentSL) ? newSL : currentSL;
     }
   else if(positionType == POSITION_TYPE_SELL)
     {
      newSL = currentPrice + pointsStep;
      return (newSL < currentSL) ? newSL : currentSL;
     }
   return currentSL;
  }
//+------------------------------------------------------------------+
//| Calculate stop loss                                              |
//+------------------------------------------------------------------+
double CalculateStopLoss(int direction)
  {
   double price = direction > 0 ? 
                 SymbolInfoDouble(_Symbol,SYMBOL_ASK) : 
                 SymbolInfoDouble(_Symbol,SYMBOL_BID);
                 
   if(UseMoneyPercentSL)
     {
      double riskAmount=AccountInfoDouble(ACCOUNT_BALANCE)*(StopLoss/100);
      double tickValue=SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_VALUE);
      double slPoints = NormalizeDouble(riskAmount/(tickValue*LotSize),0);
      return direction > 0 ? 
             price - slPoints*_Point : 
             price + slPoints*_Point;
     }
   else
     {
      return direction > 0 ? 
             price - StopLoss*_Point : 
             price + StopLoss*_Point;
     }
  }
//+------------------------------------------------------------------+
//| Calculate take profit                                            |
//+------------------------------------------------------------------+
double CalculateTakeProfit(int direction)
  {
   if(TakeProfit <= 0) return 0;
   
   double price = direction > 0 ? 
                 SymbolInfoDouble(_Symbol,SYMBOL_ASK) : 
                 SymbolInfoDouble(_Symbol,SYMBOL_BID);
                 
   return direction > 0 ? 
          price + TakeProfit*_Point : 
          price - TakeProfit*_Point;
  }
//+------------------------------------------------------------------+
//| Check if current time is within trading hours                    |
//+------------------------------------------------------------------+
bool IsWithinTradingHours()
  {
   MqlDateTime currentTime;
   TimeToStruct(TimeCurrent(),currentTime);
   
   if(currentTime.hour >= StartHour && currentTime.hour < EndHour)
      return true;
      
   return false;
  }
//+------------------------------------------------------------------+
//| Check for new day and reset counter                              |
//+------------------------------------------------------------------+
void CheckDayChange()
  {
   MqlDateTime today;
   TimeToStruct(TimeCurrent(), today);
   MqlDateTime lastTrade;
   TimeToStruct(lastTradeDate, lastTrade);
   
   if(lastTrade.day != today.day || 
      lastTrade.mon != today.mon ||  // Corrected from 'month' to 'mon'
      lastTrade.year != today.year)
     {
      ResetDailyCounter();
     }
  }
//+------------------------------------------------------------------+
//| Reset daily trade counter                                        |
//+------------------------------------------------------------------+
void ResetDailyCounter()
  {
   dailyTradesCount=0;
   lastTradeDate=TimeCurrent();
  }
//+------------------------------------------------------------------+
//| Modify position's stop loss                                      |
//+------------------------------------------------------------------+
bool ModifyPositionSL(ulong ticket, double newSL)
  {
   MqlTradeRequest request;
   ZeroMemory(request);
   request.action = TRADE_ACTION_SLTP;
   request.position = ticket;
   request.sl = newSL;
   request.symbol = _Symbol;
   request.magic = MagicNumber;
   
   MqlTradeResult result;
   return OrderSend(request, result);
  }
//+------------------------------------------------------------------+